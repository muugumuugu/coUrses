(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    124517,       2873]
NotebookOptionsPosition[    121179,       2770]
NotebookOutlinePosition[    121631,       2787]
CellTagsIndexPosition[    121588,       2784]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Real Analysis, Lecture #20", "Title",
 CellChangeTimes->{{3.427730603343124*^9, 3.427730605479782*^9}, {
   3.427730714028932*^9, 3.427730720065254*^9}, {3.427808083869459*^9, 
   3.4278080858220654`*^9}, {3.4280698891351757`*^9, 3.42806989179487*^9}, {
   3.4280774021953278`*^9, 3.428077405109408*^9}, {3.428077577180361*^9, 
   3.428077578658965*^9}, {3.4280815540751963`*^9, 3.428081558486135*^9}, {
   3.430146247651184*^9, 3.430146253157278*^9}, {3.430647409262833*^9, 
   3.430647414613461*^9}, {3.4308149623687773`*^9, 3.4308149690039787`*^9}, {
   3.4312517659522877`*^9, 3.4312517722525063`*^9}, {3.431423220690159*^9, 
   3.4314232314843407`*^9}, {3.4317948796849537`*^9, 3.431794891238557*^9}, {
   3.432028397105583*^9, 3.4320284025633707`*^9}, {3.432284268895775*^9, 
   3.432284275125175*^9}, {3.4323830037323923`*^9, 3.432383019279317*^9}, {
   3.4326451994986267`*^9, 3.432645205756702*^9}, {3.433004009473874*^9, 
   3.433004018007386*^9}, {3.433071509433227*^9, 3.433071518770158*^9}, {
   3.433498230617959*^9, 3.433498237062833*^9}, {3.464947776752775*^9, 
   3.464947783870996*^9}, {3.527415747654332*^9, 3.527415752707549*^9}, {
   3.527586173344952*^9, 3.5275861757976522`*^9}, {3.527843796776223*^9, 
   3.527843800718504*^9}, {3.559291455195259*^9, 3.5592914555975513`*^9}, {
   3.653984696117564*^9, 3.6539847017135763`*^9}, {3.685437153056402*^9, 
   3.685437157084763*^9}, 3.685696885845599*^9, {3.6860426051775513`*^9, 
   3.686042605294496*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "A Fundamental Result in Calculus:  ",
 ButtonBox["The Mean Value Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Mean_value_theorem"], None}],
 " (\"MVT\") "
}], "Section",
 CellChangeTimes->{{3.427813715486308*^9, 3.427813734324635*^9}, {
   3.427823265994441*^9, 3.427823266007557*^9}, {3.428062197544775*^9, 
   3.428062235062221*^9}, 3.5274158051428137`*^9}],

Cell[TextData[{
 "Statement of the ",
 ButtonBox["MVT",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Mean_value_theorem"], None}],
 ":  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a continuous function on the closed interval [a,b] and a \
differentiable function on the open interval (a,b), then there exists a \
number c \[Element] (a,b) such that  \n\t\t\t\t",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "c", ")"}], "=", 
    FractionBox[
     RowBox[{
      RowBox[{"f", "(", "b", ")"}], " ", "-", " ", 
      RowBox[{"f", "(", "a", ")"}]}], 
     RowBox[{"b", " ", "-", " ", "a"}]]}], TraditionalForm]],
  FontWeight->"Plain"]
}], "Subsection",
 CellChangeTimes->{{3.427818432719614*^9, 3.427818536254238*^9}, {
  3.4278192315977592`*^9, 3.4278192330315104`*^9}, {3.428062261670611*^9, 
  3.4280622686861477`*^9}, {3.4281734256448593`*^9, 3.428173425652426*^9}}],

Cell[CellGroupData[{

Cell["illustrating the theorem:", "Subsection",
 CellChangeTimes->{{3.427818553143485*^9, 3.427818583812972*^9}}],

Cell[TextData[{
 "For the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 " over an interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.427821006266467*^9, 3.427821023943718*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", "^", "2"}]}], ";", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"f", "[", "x", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             FractionBox[
              RowBox[{
               RowBox[{"f", "[", "b", "]"}], "-", 
               RowBox[{"f", "[", "a", "]"}]}], 
              RowBox[{"b", "-", "a"}]], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{"x", "-", "a"}], ")"}]}], "+", 
           RowBox[{"f", "[", "a", "]"}]}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"f", "'"}], "[", 
             FractionBox[
              RowBox[{"a", "+", "b"}], "2"], "]"}], "*", 
            RowBox[{"(", 
             RowBox[{"x", "-", 
              FractionBox[
               RowBox[{"a", "+", "b"}], "2"]}], ")"}]}], "+", 
           RowBox[{"f", "[", 
            FractionBox[
             RowBox[{"a", "+", "b"}], "2"], "]"}]}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "5"}], ",", "15"}], "}"}]}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Red"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Blue"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"Thick", ",", "Green"}], "}"}]}], "}"}]}]}], "]"}], ",", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", 
            RowBox[{"f", "[", "a", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"b", ",", 
            RowBox[{"f", "[", "b", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox[
             RowBox[{"a", "+", "b"}], "2"], ",", 
            RowBox[{"f", "[", 
             FractionBox[
              RowBox[{"a", "+", "b"}], "2"], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"a", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"b", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            FractionBox[
             RowBox[{"a", "+", "b"}], "2"], ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"PlotStyle", "\[Rule]", 
         RowBox[{"PointSize", "[", ".02", "]"}]}]}], "]"}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"b", "-", ".01"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", 
      RowBox[{"-", "2.9"}], ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4278185877948236`*^9, 3.427819109782103*^9}}],

Cell[TextData[{
 "For an \"arbitrary\" differentiable function ",
 StyleBox["f",
  FontSlant->"Italic"],
 " over an interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 " (the following code does ",
 StyleBox["not",
  FontSlant->"Italic"],
 " work perfectly because ",
 ButtonBox["FindRoot",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/ref/FindRoot.html"], 
    None}],
 " is not guaranteed to find a ",
 StyleBox["c",
  FontSlant->"Italic"],
 " between ",
 StyleBox["a",
  FontSlant->"Italic"],
 " and ",
 StyleBox["b ",
  FontSlant->"Italic"],
 "(it might find a ",
 StyleBox["c",
  FontSlant->"Italic"],
 " outside this interval), though it probably will for most examples):"
}], "Text",
 CellChangeTimes->{{3.427821041255886*^9, 3.4278210594713917`*^9}, {
  3.427821886953505*^9, 3.427821934718726*^9}, {3.428060036305191*^9, 
  3.428060037409293*^9}, {3.428173476451098*^9, 3.428173476451449*^9}, {
  3.428334441778451*^9, 3.428334454606349*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{"2", "x"}], "]"}], "-", 
    RowBox[{"3", "x"}]}]}], ";", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"sol", "=", 
      RowBox[{"FindRoot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"f", "'"}], "[", "c", "]"}], "\[Equal]", 
         FractionBox[
          RowBox[{
           RowBox[{"f", "[", "b", "]"}], "-", 
           RowBox[{"f", "[", "a", "]"}]}], 
          RowBox[{"b", "-", "a"}]]}], ",", 
        RowBox[{"{", 
         RowBox[{"c", ",", 
          FractionBox[
           RowBox[{"a", "+", "b"}], "2"]}], "}"}]}], "]"}]}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"Plot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"f", "[", "x", "]"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              FractionBox[
               RowBox[{
                RowBox[{"f", "[", "b", "]"}], "-", 
                RowBox[{"f", "[", "a", "]"}]}], 
               RowBox[{"b", "-", "a"}]], ")"}], "*", 
             RowBox[{"(", 
              RowBox[{"x", "-", "a"}], ")"}]}], "+", 
            RowBox[{"f", "[", "a", "]"}]}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"f", "'"}], "[", 
              RowBox[{"c", "/.", "sol"}], "]"}], "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x", "-", "c"}], "/.", "sol"}], ")"}]}], "+", 
            RowBox[{"f", "[", 
             RowBox[{"c", "/.", "sol"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", "10"}], "}"}]}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Thick", ",", "Red"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"Thick", ",", "Blue"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"Thick", ",", "Green"}], "}"}]}], "}"}]}]}], "]"}], ",", 
       
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", 
             RowBox[{"f", "[", "a", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"b", ",", 
             RowBox[{"f", "[", "b", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"c", "/.", "sol"}], ",", 
             RowBox[{"f", "[", 
              RowBox[{"c", "/.", "sol"}], "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"a", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"b", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"c", "/.", "sol"}], ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"PointSize", "[", ".02", "]"}]}]}], "]"}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"a", ",", 
      RowBox[{"-", "3"}], ",", 
      RowBox[{"b", "-", ".01"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", ",", 
      RowBox[{"-", "2.9"}], ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4278214527903433`*^9, 3.427821483673244*^9}, {
  3.427821539932097*^9, 3.427821542074847*^9}, {3.4278215782203913`*^9, 
  3.4278216664100323`*^9}, {3.427821748692799*^9, 3.427821750586844*^9}, {
  3.4278217969244213`*^9, 3.427821803946253*^9}, {3.427821845085401*^9, 
  3.427821862105529*^9}, {3.427821940339344*^9, 3.427821963266625*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Important consequences (\"corollaries\") of the theorem:", "Subsection",
 CellChangeTimes->{{3.427819177071939*^9, 3.4278192035092278`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The Increasing Function Theorem:  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a continuous function on the closed interval [a,b] and a \
differentiable function on the open interval (a,b) and if ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "x", ")"}], ">", "0"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 StyleBox["x",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" in the open interval (a,b), then ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" is a strictly increasing function on the closed interval [a,b].  \
(Note:  there is a \"Decreasing Function Theorem\" too).",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427819212378941*^9, 3.4278192435047197`*^9}, {
  3.427819277069644*^9, 3.4278193196699057`*^9}, {3.4280600601859407`*^9, 
  3.428060071296235*^9}}],

Cell[TextData[{
 StyleBox["Warning:",
  FontWeight->"Bold"],
 "  you need to be careful in how you interpret this theorem.  Somewhat \
counter-intuitively, just because ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "c", ")"}], ">", "0"}], 
   TraditionalForm]]],
 " at some number ",
 StyleBox["c",
  FontSlant->"Italic"],
 ", that does ",
 StyleBox["not",
  FontWeight->"Bold"],
 " mean that ",
 StyleBox["f",
  FontSlant->"Italic"],
 " is increasing for all ",
 StyleBox["x",
  FontSlant->"Italic"],
 " near ",
 StyleBox["c",
  FontSlant->"Italic"],
 ".  Consider the example below.  "
}], "Text",
 CellChangeTimes->{{3.427819560054488*^9, 3.427819659721547*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example for Warning above", "Subsubsection",
 CellChangeTimes->{{3.4278205167899218`*^9, 3.427820533052741*^9}, {
  3.4296110991924887`*^9, 3.429611100476658*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "\[NotEqual]", "0"}], ",", 
    RowBox[{
     RowBox[{"x", "/", "2"}], "+", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "*", 
      RowBox[{"Sin", "[", 
       RowBox[{"1", "/", "x"}], "]"}]}]}], ",", "0"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.42781966142062*^9, 3.427819678291045*^9}}],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"f", "[", "a", "]"}], "-", 
     RowBox[{"f", "[", "0", "]"}]}], 
    RowBox[{"a", "-", "0"}]], ",", 
   RowBox[{"a", "\[Rule]", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.427819756601451*^9, 3.427819786659101*^9}}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "2"}], "a"}], ",", 
        RowBox[{"2", "a"}]}], "}"}]}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Thick"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", ".01", ",", 
     RowBox[{"-", ".01"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4278198934603777`*^9, 3.427819993476915*^9}, {
  3.4278200816881237`*^9, 3.427820084436782*^9}}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "a"}], ",", "a"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "a"}], "/", "20"}], ",", 
        RowBox[{"a", "/", "20"}]}], "}"}]}], ",", 
     RowBox[{"AxesLabel", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Thick"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", ".5", ",", 
     RowBox[{"-", ".01"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4278198934603777`*^9, 3.427819993476915*^9}, {
   3.4278200294394083`*^9, 3.427820057356914*^9}, {3.4278200927275677`*^9, 
   3.427820092998085*^9}, 3.427820173063479*^9}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"f", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{"-", "a"}], "+", ".01"}], ",", 
         RowBox[{"a", "+", ".01"}]}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "a"}], "+", 
           RowBox[{"f", "[", ".01", "]"}]}], ",", 
          RowBox[{"a", "+", 
           RowBox[{"f", "[", ".01", "]"}]}]}], "}"}]}], ",", 
       RowBox[{"AxesLabel", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", "Thick"}]}], "]"}], ",", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{".01", ",", 
          RowBox[{"f", "[", ".01", "]"}]}], "}"}], "}"}], ",", 
       RowBox[{"PlotStyle", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", ".02", "]"}], ",", "Black"}], "}"}]}]}], 
      "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", ".0001", ",", 
     RowBox[{"-", ".0001"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.4278198934603777`*^9, 3.427819993476915*^9}, {
  3.4278200294394083`*^9, 3.427820057356914*^9}, {3.4278200927275677`*^9, 
  3.427820092998085*^9}, {3.427820173063479*^9, 3.427820193957198*^9}, {
  3.427820242255393*^9, 3.427820408982582*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", ".01", "]"}]], "Input",
 CellChangeTimes->{{3.427820479657996*^9, 3.427820481274225*^9}}],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "'"}], "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.427819715144849*^9, 3.427819745787293*^9}}]
}, Open  ]],

Cell[TextData[{
 "The Constant Function Theorem:  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a continuous function on the closed interval [a,b] and a \
differentiable function on the open interval (a,b) and if ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "x", ")"}], "=", "0"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 StyleBox["x",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" in the open interval (a,b), then ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a constant on the closed interval [a,b].",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427819212378941*^9, 3.4278192435047197`*^9}, {
   3.427819277069644*^9, 3.427819353021834*^9}, 3.4280600958043756`*^9}],

Cell[TextData[{
 "Antiderivatives of the same function differ by constants:  ",
 StyleBox["Let ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" and ",
  FontWeight->"Plain"],
 StyleBox["g",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" be two functions which are continuous on the closed interval \
[a,b] and differentiable on the open interval (a,b).  If ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "x", ")"}], "=", 
    RowBox[{
     SuperscriptBox["g", 
      RowBox[{" ", "\[Prime]"}]], "(", "x", ")"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 StyleBox["x",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" in the open interval (a,b), then there is a constant ",
  FontWeight->"Plain"],
 StyleBox["C",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "x", ")"}], "=", 
    RowBox[{
     RowBox[{"g", "(", "x", ")"}], "+", "C"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 StyleBox["x",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" in the closed interval [a,b].",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427819373635366*^9, 3.427819513306798*^9}}],

Cell[TextData[{
 "Other applications:  ",
 StyleBox["(1) ",
  FontWeight->"Plain"],
 ButtonBox["the first derivative test",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/First_derivative_test"], None}],
 StyleBox[",",
  FontWeight->"Plain"],
 " ",
 StyleBox["(2) ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"a", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"b", " ", "x"}]]}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is the \"general solution\" of the differential equation ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["y", 
     RowBox[{" ", "\[Prime]"}]], "=", 
    RowBox[{"b", " ", "y"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".  Also, this function is the unique solution of the \"initial \
value problem\" ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["y", 
      RowBox[{" ", "\[Prime]"}]], "=", 
     RowBox[{"b", " ", "y"}]}], ",", " ", 
    RowBox[{
     RowBox[{"y", "(", "0", ")"}], "=", "a"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".  (3) ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{
     RowBox[{"a", " ", 
      RowBox[{"cos", "(", 
       RowBox[{"k", " ", "x"}], ")"}]}], "+", 
     RowBox[{"b", " ", 
      RowBox[{"sin", "(", 
       RowBox[{"k", " ", "x"}], ")"}]}]}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is the \"general solution\" of the differential equation ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["y", 
     RowBox[{" ", "\[DoublePrime]"}]], "=", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["k", "2"]}], "y"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 ".  ",
 StyleBox["Also, this function is the unique solution of the initial value \
problem",
  FontWeight->"Plain"],
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["y", 
      RowBox[{" ", "\[DoublePrime]"}]], "=", 
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox["k", "2"]}], "y"}]}], ",", " ", 
    RowBox[{
     RowBox[{"y", "(", "0", ")"}], "=", "a"}], ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "'"}], 
      RowBox[{"(", "0", ")"}]}], " ", "=", " ", 
     RowBox[{"b", " ", "k"}]}]}], TraditionalForm]],
  FontWeight->"Plain"],
 ". ",
 StyleBox["  (4) The ",
  FontWeight->"Plain"],
 ButtonBox["Fundamental Theorem of Calculus",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Fundamental_theorem_of_calculus"], 
    None}],
 StyleBox[".  And the list goes on and on and on...  ",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427820567081977*^9, 3.4278207746226*^9}, {
  3.428060114005352*^9, 3.428060212992427*^9}, {3.428173506337448*^9, 
  3.4281735264643097`*^9}, {3.4281737687614527`*^9, 3.4281737803533497`*^9}, {
  3.4281738288357*^9, 3.428173828836656*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Idea of Proof of the Theorem (if we \"Work Backwards\")", "Subsection",
 CellChangeTimes->{{3.427820803574174*^9, 3.4278208206947327`*^9}, {
  3.4278222818656073`*^9, 3.427822283298293*^9}, {3.4278236679709997`*^9, 
  3.427823670671349*^9}, {3.4280602219644823`*^9, 3.428060225952346*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "It can be derived from ",
 ButtonBox["Rolle's Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Rolle%27s_theorem"], None}],
 ":  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a continuous function on the closed interval [a,b] and a \
differentiable function on the open interval (a,b) and if ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "a", ")"}], "=", 
    RowBox[{"f", "(", "b", ")"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[", then there exists a number c \[Element] (a,b) such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "c", ")"}], "=", "0"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".",
  FontWeight->"Plain"],
 " "
}], "Subsubsection",
 CellChangeTimes->{{3.427820830963958*^9, 3.427820879294505*^9}, {
  3.4278209141856337`*^9, 3.427820927001071*^9}, {3.4278232325661907`*^9, 
  3.427823237263596*^9}}],

Cell[TextData[{
 "The MVT for a given function ",
 StyleBox["f",
  FontSlant->"Italic"],
 " and given interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 " follows by applying Rolle's Theorem to the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "x", ")"}], "=", 
    RowBox[{
     RowBox[{"f", "(", "x", ")"}], "-", 
     RowBox[{"L", "(", "x", ")"}]}]}], TraditionalForm]]],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"L", "(", "x", ")"}], "=", 
    RowBox[{
     RowBox[{
      FractionBox[
       RowBox[{
        RowBox[{"f", "(", "b", ")"}], "-", 
        RowBox[{"f", "(", "a", ")"}]}], 
       RowBox[{"b", "-", "a"}]], 
      RowBox[{"(", 
       RowBox[{"x", "-", "a"}], ")"}]}], "+", 
     RowBox[{"f", "(", "a", ")"}]}]}], TraditionalForm]]],
 " is the function whose graph is the ",
 ButtonBox["secant line",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathworld.wolfram.com/SecantLine.html"], None}],
 " to the graph of ",
 StyleBox["f",
  FontSlant->"Italic"],
 " between the points ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"a", ",", 
     RowBox[{"f", "(", "a", ")"}]}], ")"}], TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"b", ",", 
     RowBox[{"f", "(", "b", ")"}]}], ")"}], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{{3.427820955339511*^9, 3.4278209894948473`*^9}, {
  3.427822324710891*^9, 3.427822327259233*^9}, {3.427822994857499*^9, 
  3.427823099999385*^9}, {3.428334542768586*^9, 3.428334542781252*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "...which can be derived from ",
 ButtonBox["Fermat's Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Fermat%27s_theorem_%28stationary_points%\
29"], None}],
 " (not to be confused with ",
 ButtonBox["Fermat's Last Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem"], None}],
 " or ",
 ButtonBox["Fermat's Little Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Fermat%27s_little_theorem"], None}],
 "):  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" is a ",
  FontWeight->"Plain"],
 StyleBox[ButtonBox["local extreme point",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Maxima_and_minima"], None}],
  FontWeight->"Plain"],
 StyleBox[" (a local max or a local min) of a function ",
  FontWeight->"Plain"],
 StyleBox["f ",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["over an open interval (a,b), then either ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is not differentiable at ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" or ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["f", 
      RowBox[{" ", "\[Prime]"}]], "(", "c", ")"}], "=", "0"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427823117709388*^9, 3.427823146668324*^9}, {
   3.4278231773390303`*^9, 3.4278232141512012`*^9}, {3.427823278352407*^9, 
   3.427823403662649*^9}, {3.428060339374905*^9, 3.42806037539172*^9}, {
   3.428060566390873*^9, 3.428060592808111*^9}, 3.4280620930387793`*^9, {
   3.4283346090930843`*^9, 3.428334609093976*^9}}],

Cell[TextData[{
 "For a given function ",
 StyleBox["f",
  FontSlant->"Italic"],
 " and a given interval ",
 Cell[BoxData[
  FormBox[
   RowBox[{"[", 
    RowBox[{"a", ",", "b"}], "]"}], TraditionalForm]]],
 ", Rolle's theorem follows from Fermat's theorem because of the following:"
}], "Text",
 CellChangeTimes->{{3.427823446045751*^9, 3.4278235401029654`*^9}, {
  3.4280603807996683`*^9, 3.428060392797694*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 ButtonBox["Extreme Value Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Extreme_value_theorem"], None}],
 " (EVT):  ",
 StyleBox["If ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  is a continuous function on the closed interval [a,b], then ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["  has a global maximum and global minimum value on this interval.  \
That is, in this situation there exist numbers ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" and ",
  FontWeight->"Plain"],
 StyleBox["d",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" in the closed interval [a,b] such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", "c", ")"}], "\[LessEqual]", 
    RowBox[{"f", "(", "x", ")"}], "\[LessEqual]", 
    RowBox[{"f", "(", "d", ")"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Element]", 
    RowBox[{"[", 
     RowBox[{"a", ",", "b"}], "]"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".  ",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.427823556575729*^9, 3.427823564118688*^9}, {
  3.427823601098824*^9, 3.42782364999196*^9}, {3.428060399291884*^9, 
  3.42806047255049*^9}, {3.428173883967017*^9, 3.428173883981917*^9}}],

Cell["\<\
The truth of Fermat's Theorem follows from the definition of the derivative \
(which is based on the limit concept) and the definition of a local extreme \
point.  The truth of the EVT depends on a number of foundational ideas for \
our course.  They are:    \
\>", "Text",
 CellChangeTimes->{{3.428062065030588*^9, 3.428062121990147*^9}, {
  3.428334676030828*^9, 3.428334680642357*^9}}]
}, Open  ]],

Cell[TextData[{
 "The ",
 ButtonBox["Definition of Continuity",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Continuous_function#Cauchy_definition_.\
28epsilon-delta.29"], None}],
 ":  ",
 StyleBox["A function ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" defined on an interval containing a number ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" is said to be ",
  FontWeight->"Plain"],
 "continuous at ",
 StyleBox["c",
  FontSlant->"Italic"],
 StyleBox[" if for all ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Epsilon]", ">", "0"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[", there exists a number ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Delta]", ">", "0"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      RowBox[{"f", "(", "x", ")"}], "-", 
      RowBox[{"f", "(", "c", ")"}]}], "\[RightBracketingBar]"}], "<", 
    "\[Epsilon]"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all ",
  FontWeight->"Plain"],
 StyleBox["x ",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox["in the interval which satisfy the condition that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "<", 
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{"x", "-", "c"}], "\[RightBracketingBar]"}], "<", "\[Epsilon]"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".  A function ",
  FontWeight->"Plain"],
 StyleBox["f",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" is said to be ",
  FontWeight->"Plain"],
 "continuous on an interval",
 StyleBox[" if it is continuous at every point in that interval.  In effect, \
continuity at a number ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" says that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["lim", 
      RowBox[{"x", "\[Rule]", "c"}]], 
     RowBox[{"f", "(", "x", ")"}]}], "=", 
    RowBox[{"f", "(", "c", ")"}]}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" (assuming ",
  FontWeight->"Plain"],
 StyleBox["x",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" is close enough to ",
  FontWeight->"Plain"],
 StyleBox["c",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" to be in the domain of ",
  FontWeight->"Plain"],
 StyleBox["f ",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[").  In other words, the definition of continuity is inextricably \
linked to the concept of limits.      ",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.428060814260861*^9, 3.428061125375574*^9}, {
  3.428061241372839*^9, 3.428061241555183*^9}, {3.42817459811684*^9, 
  3.428174598131537*^9}}],

Cell[TextData[{
 "The ",
 ButtonBox["Definition of Convergence of a Sequence",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Limit_of_a_sequence#Formal_definition"],
     None}],
 ":  ",
 StyleBox["A sequence ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is said to ",
  FontWeight->"Plain"],
 "converge to a number ",
 StyleBox["L",
  FontSlant->"Italic"],
 StyleBox[" if for all ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Epsilon]", ">", "0"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[", there exists a positive integer ",
  FontWeight->"Plain"],
 StyleBox["N",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", 
     RowBox[{
      SubscriptBox["x", "n"], "-", "L"}], "\[RightBracketingBar]"}], "<", 
    "\[Epsilon]"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all positive integers ",
  FontWeight->"Plain"],
 StyleBox["n",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[" satisfying the condition that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[GreaterEqual]", "N"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[".",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.42806118564123*^9, 3.428061324116948*^9}, {
  3.428174646617084*^9, 3.428174646633749*^9}}],

Cell[TextData[{
 "The Definition of a Bounded Sequence:  ",
 StyleBox["A sequence ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is ",
  FontWeight->"Plain"],
 "bounded",
 StyleBox[" if there exists a number ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"M", ">", "0"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" such that ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", 
     SubscriptBox["x", "n"], "\[RightBracketingBar]"}], "<", "M"}], 
   TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" for all positive integers ",
  FontWeight->"Plain"],
 StyleBox["n",
  FontWeight->"Plain",
  FontSlant->"Italic"],
 StyleBox[".",
  FontWeight->"Plain"],
 "  "
}], "Subsubsection",
 CellChangeTimes->{{3.428061366869833*^9, 3.428061567989402*^9}}],

Cell[TextData[{
 "The Definition of a ",
 ButtonBox["Subsequence",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Subsequence"], None}],
 " of a Given Sequence:  ",
 StyleBox["A ",
  FontWeight->"Plain"],
 "subsequence",
 StyleBox[" of a given sequence ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is a sequence made up of some of the terms of ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" in the same order they appear in the original sequence.  To be \
more precise, a subsequence of ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is any sequence that takes the form ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", 
     SubscriptBox["p", "n"]], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[", where ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["p", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is a strictly increasing sequence of positive integers.  ",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.428061366869833*^9, 3.428061489941071*^9}, {
  3.4281747038524637`*^9, 3.4281747038532467`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "The (simplest form of the) ",
 ButtonBox["Bolzano-Weierstrass Theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikipedia.org/wiki/Bolzano-Weierstrass_Theorem"], None}],
 ":  ",
 StyleBox["Every bounded sequence of real numbers has a convergent \
subsequence.  Moreover, if ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" is a sequence of real numbers from the closed interval [a,b], \
then ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", "n"], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" has a subsequence ",
  FontWeight->"Plain"],
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    SubscriptBox["x", 
     SubscriptBox["p", "n"]], "}"}], TraditionalForm]],
  FontWeight->"Plain"],
 StyleBox[" that converges to a real number in [a,b].  ",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.428061631002932*^9, 3.428061716022682*^9}, {
  3.4283347143496304`*^9, 3.428334714361782*^9}, {3.428334744824185*^9, 
  3.428334748554426*^9}, {3.428334782847334*^9, 3.428334792290024*^9}}],

Cell["\<\
All of these things, in turn, are dependent on the Completeness Axiom (also \
called the Least Upper Bound Property).  This property is the most important \
property that distinguishes the field of real numbers \[DoubleStruckCapitalR] \
from the field of rational numbers \[DoubleStruckCapitalQ].\
\>", "Text",
 CellChangeTimes->{{3.428061728539784*^9, 3.428061815597384*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 ButtonBox["Completeness Axiom",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://planetmath.org/encyclopedia/AxiomOfAnalysis.html"], None}],
 ":  ",
 StyleBox["For every nonempty set of real numbers which is bounded above, \
there exists a real number which is the least upper bound for that set.  \
(that is, there is a smallest upper bound for the set).",
  FontWeight->"Plain"]
}], "Subsubsection",
 CellChangeTimes->{{3.428061823128519*^9, 3.428061929806088*^9}, {
  3.428334971959937*^9, 3.428334971960767*^9}}],

Cell[TextData[{
 "Every nonempty set of rational numbers which is bounded above also has a \
least upper bound (since every rational number is a real number).  ",
 StyleBox["However, this least upper bound need not be a rational number!",
  FontSize->14,
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" ",
  FontSize->14],
 " In all likelihood, the least upper bound of a randomly chosen bounded set \
of rational numbers will be an ",
 StyleBox["irrational",
  FontSlant->"Italic"],
 " number (more on this when we get to section 1.4 of the textbook)."
}], "Text",
 CellChangeTimes->{{3.4280619402379713`*^9, 3.42806202436732*^9}, {
  3.4296112700694838`*^9, 3.429611286504801*^9}}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell["Definition of Riemann Integrability", "Section",
 CellChangeTimes->{{3.434383505477283*^9, 3.434383521053587*^9}}],

Cell["Proof that a Function is Riemann Integrable ", "Section",
 CellChangeTimes->{{3.434383539480316*^9, 3.434383550558784*^9}}],

Cell["Basic Properties", "Section",
 CellChangeTimes->{{3.434383559016711*^9, 3.434383561437388*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Unbounded Functions are Not Riemann Integrable  (",
 StyleBox["Note:",
  FontWeight->"Bold"],
 " the existence of ",
 StyleBox["improper",
  FontSlant->"Italic"],
 " integrals of certain unbounded functions does not contradict this fact)"
}], "Section",
 CellChangeTimes->{{3.434834738936805*^9, 3.4348347558028727`*^9}, {
  3.4348358042958813`*^9, 3.434835840644561*^9}}],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "1"], 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"Sqrt", "[", "x", "]"}]}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.5599062120941925`*^9, 3.5599062163215218`*^9}}]
}, Closed]],

Cell["Equivalent Condition for Riemann Integrability", "Section",
 CellChangeTimes->{{3.43483483032909*^9, 3.4348348509253674`*^9}, {
  3.686042635606387*^9, 3.686042647164691*^9}}],

Cell[TextData[{
 "Continuous Functions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", ":", 
    RowBox[{
     RowBox[{"[", 
      RowBox[{"a", ",", "b"}], "]"}], "\[LongRightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]], "None"],
 " are Riemann Integrable"
}], "Section",
 CellChangeTimes->{{3.43483483032909*^9, 3.4348348509253674`*^9}}],

Cell[TextData[{
 "Monotone Functions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"f", ":", 
    RowBox[{
     RowBox[{"[", 
      RowBox[{"a", ",", "b"}], "]"}], "\[LongRightArrow]", 
     "\[DoubleStruckCapitalR]"}]}], TraditionalForm]], "None"],
 " are Riemann Integrable"
}], "Section",
 CellChangeTimes->{{3.4348348628246107`*^9, 3.434834881548388*^9}}],

Cell[TextData[{
 "The Oscillation of a Bounded Function over a Closed Interval (Notation \
Used: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    RowBox[{"f", ",", 
     RowBox[{"[", 
      RowBox[{"a", ",", "b"}], "]"}]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ")"
}], "Section",
 CellChangeTimes->{{3.4348348628246107`*^9, 3.434834881548388*^9}, {
  3.685437245651002*^9, 3.685437282703527*^9}}],

Cell["Properties of Integrals", "Section",
 CellChangeTimes->{{3.43483483032909*^9, 3.4348348509253674`*^9}, {
  3.686042635606387*^9, 3.686042657436039*^9}}],

Cell[CellGroupData[{

Cell["The Fundamental Theorem of Calculus (FTC)", "Section",
 CellChangeTimes->{{3.43483483032909*^9, 3.4348348509253674`*^9}, {
  3.686042635606387*^9, 3.6860426766360693`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"E", "^", 
    RowBox[{"(", 
     RowBox[{"-", 
      RowBox[{"x", "^", "2"}]}], ")"}]}], 
   RowBox[{"\[DifferentialD]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.6860460614542108`*^9, 3.6860460650168796`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  SqrtBox["\[Pi]"], " ", 
  RowBox[{"Erf", "[", "x", "]"}]}]], "Output",
 CellChangeTimes->{3.686046112128478*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Kinney", "[", "x_", "]"}], ":=", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"t", "^", "3"}], "+", 
       RowBox[{"E", "^", 
        RowBox[{"(", "t", ")"}]}]}], "]"}], "*", 
     RowBox[{"Cos", "[", "t", "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "x"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6860462085861692`*^9, 3.686046255666523*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{
        RowBox[{"x", "^", "3"}], "+", 
        RowBox[{"E", "^", 
         RowBox[{"(", "x", ")"}]}]}], "]"}], "*", 
      RowBox[{"Cos", "[", "x", "]"}]}], ",", 
     RowBox[{"Kinney", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "4"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Blue"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Red"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.68604626938592*^9, 3.686046332717046*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0, 0, 1], Thickness[Large], Opacity[1.], LineBox[CompressedData["
1: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

      "]]}, 
    {RGBColor[1, 0, 0], Thickness[Large], Opacity[1.], LineBox[CompressedData["
1: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
XNN9b+UaCrTnbXqxbSubeK64TEs3pkDjhNGeJk828ZmV93S1HgVKNhPdNT5s
YqS76J/KfApmPmnMsPdjE96ep6n+yhRIzyjwLfNnE7qty+iwPObRHzH84mA2
mfVud14L+neWidf1laFsIruyZKcZj4KpG6YueXvZJNYxdtUYg4JR5nx5w/1s
stUwVnRqohn6t/NqsiPY5Pwxz5CNI83Q87E9QSeKTUTU//QxUf86Fn22eRDN
Jm43b7VOQ/0TxD0QUT/MJh8fOOz3w/nb1Hvm462jbKIzlZ45H/OlYCryxobj
eH5uyiU8zJdtIv5h3FNssvuOqcEWzJed8lusX57BekevqlfGef93nsXcnfFs
Urzjg9kWzEf9Sw3HFc6zSX7N3Vph1Idhov617CKbzHE+fWkp5qlxK9n70Yls
Et7ZZP31ZzPQtnAOLbnKJv63amL+ILN8B5wE19gk6+ot/0j8Pm+PQOvSDTbp
s6mbOIrPE4n5yja7xSYbxXsauZhvJeIKG0Zus0m1N30XvaUZZJIfP824xyYn
lTPeBaP+zEy/cdI1g02KomamO7X97wfiPMQz2WSUY536+E8zzHkXtextFps0
bI5uP4B5bF5FgHjIU6yfRWFQLuYxjZ8urWo5bPLX9B3//7yu1bE+r+YFm+wy
/nArHOu/dMjowvFXbLLybUXVMJ7PMpbGTqN8Nimw6bBowPMzlpBf1VmA/Wr7
OE1FnII1C4d6bN6zifWr97PfKVBgtqz1Pf0jm+g/lVsii/7H0vTbtaef2cSj
0FkmbyEFG9yfrpetZJOYe0p5fzCfbT+/627jDzYp/dTvts6dAr8bblHxjWxi
ZjgzKMWXgsCHVhtWUWxybX290+zdFISVLGTeacX6NXHfhx+l4PjYb7eAf2wi
qZG0m/sQ8yGvVk+pn016VuWd+peDfmvGe5HKQbzPea9vVRZQkKidlqs7jvur
vq69uZqC9G1bZcY5HCKszJ2qH6EgM8im6+E0Dnn5alv4O9SnJwdMitxFOGT3
NuuRXcJ8yL2ssPudBIdUxH78ODEL80+asPkeaQ5JVJho+qrKh8LHo0rzZTkk
7h/vlBP620+f676cVOCQg2018x0M+VBWV5JmrMQhx0T0vd8C5o1fORHdKhyy
wa7t20dTPtT03ra/ocYhuf9cDHzX8+HH1IUF9vM5JOx13olE1KdmkSM0lgaH
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
iO/RfC4Z8DGvz71Jwa52k57pb7nkS6zJwleXKdDyP7In+R2X9LB7RD+doeBh
sHjM0w9c0q6fUaobjvk5cu5VqopL9KNu/ZmzgYIdU34qAd+4pEEQHBZpif0a
k3V3uBb7qa9pqxr69TvHlmeL/+QS/5g7VRG6FHgLHTK62sQlcRs0/i3TpEDt
zPuCeXwu6WctP+M+j4JbCXZfVvzG+7x4fjdtJgWeMy47fGzH/fVY34r9//8b
JTZ8d+zkkrnz1R6cQj9HzZyztbmbSy4emzwkjfP3xjWf1p3/uMRE+K/2XC7m
D+WH/kN9XHJX9q71W5wvird6e2MGuaiHD2mdNAp+zl22X2wE37+C3XMX51Hy
vQNTV8a45O03nbVD482wZeG7o3MnsZ8Nk57+GEM/m8kTeUzjkckl/ts2Itfr
WCcYM3mEpVc76YN85el5uQ9sHvGKLrk/HX/vrP89xYHHI6XOYlxbnPdyLxXn
NgnxiKgiTWvuVDPULvfK8BPlkfaXx7PPoj5cyk9fPCjOIwr+z++fZKH/XNnz
/JAkj6y9WJgsg/NQukjXRHQGj/g+O3xBW4SCr2vDixJleeSFz85ZVahHCR/f
WKjN5BHZZ53Gozgf7SzZlY8UeGQ03e3ELZyP08stnJYr8Uhehr38RxWcb9Xf
ttmr8UiMq928EG30o1Fn1Crn8chcIzH1Yn3Mf+qmv2wW8MjG4X1ZYSYUHI3M
3m6lxSMHVVOyW6wpiFA7v8NsGa7HMIsjEkLBvjILjRIjHtnncMP1SiT25z7G
H9MVPLLdZ3+BBea/4NJg/9WreEQtIG330BUKfEJtd5lY8ojLM+vyw+gHvBR5
OnnWPJKiw5lh8hnP/8Obv8vteGR9keGeGvS/rgrauw038sjVSzmMg78xT75v
XfLCmUfKqqk1UTgfnYNS+vS34H7mTNUb4nx0KBLdo7sV16PWZPN+Gh9sA4v1
nnryiG1H/9AxCT5Yyx0YXOzNI1UWehd/o7+xLNR9nuXDI6prr9s0KvHB3L8z
TNuPR9rc76Z7z0N/J5O2LNOfRx4uuhMbtgjnUcGWkUW7eKSiY1hHbAnOCz+p
3IxgHuHnfXFXwzwO0p/DNUJ5pMbjovEz9F/G+THL0/diPQOkfV/jPDXyNRqf
vx/rEys2pYf5fplk7+s7EVgP49gURZwneq/TD8yNwv6JP+0TYsaHJds9TNKi
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
WOZ/q70vww==
      "]]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0, 4}, {-0.999006415620085, 0.9994005382730986}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6860463092940598`*^9, 3.686046347373987*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "2"}], ")"}], "x", "*", 
      RowBox[{"Sqrt", "[", 
       RowBox[{"1", "-", 
        RowBox[{"x", "^", "2"}]}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", "2"}], ")"}], 
      RowBox[{"ArcSin", "[", "x", "]"}]}]}], ",", "x"}], "]"}], "//", 
  "Simplify"}]], "Input",
 CellChangeTimes->{{3.6860466863429627`*^9, 3.6860467293291063`*^9}}],

Cell[BoxData[
 SqrtBox[
  RowBox[{"1", "-", 
   SuperscriptBox["x", "2"]}]]], "Output",
 CellChangeTimes->{{3.6860467050468535`*^9, 3.686046729954125*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1522, 960},
WindowMargins->{{159, Automatic}, {9, Automatic}},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
Magnification:>1.5 Inherited,
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 1482, 20, 150, "Title"],
Cell[CellGroupData[{
Cell[2074, 46, 422, 10, 106, "Section"],
Cell[2499, 58, 1076, 31, 10174, "Subsection"],
Cell[CellGroupData[{
Cell[3600, 93, 113, 1, 2794, "Subsection"],
Cell[3716, 96, 372, 14, 3280, "Text"],
Cell[4091, 112, 3153, 91, 27805, "Input"],
Cell[7247, 205, 1058, 35, 6439, "Text"],
Cell[8308, 242, 3923, 109, 25515, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[12268, 356, 146, 1, 2794, "Subsection"],
Cell[CellGroupData[{
Cell[12439, 361, 1099, 34, 7714, "Subsubsection"],
Cell[13541, 397, 738, 29, 6439, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14316, 431, 169, 2, 2794, "Subsubsection"],
Cell[14488, 435, 408, 12, 3201, "Input"],
Cell[14899, 449, 311, 9, 5055, "Input"],
Cell[15213, 460, 826, 23, 4920, "Input"],
Cell[16042, 485, 912, 24, 4920, "Input"],
Cell[16957, 511, 1568, 42, 11980, "Input"],
Cell[18528, 555, 140, 3, 3066, "Input"],
Cell[18671, 560, 390, 11, 3066, "Input"]
}, Open  ]],
Cell[19076, 574, 990, 32, 6148, "Subsubsection"],
Cell[20069, 608, 1474, 52, 7197, "Subsubsection"],
Cell[21546, 662, 3012, 102, 12118, "Subsubsection"]
}, Closed]],
Cell[CellGroupData[{
Cell[24595, 769, 295, 3, 2794, "Subsection"],
Cell[CellGroupData[{
Cell[24915, 776, 1126, 37, 6165, "Subsubsection"],
Cell[26044, 815, 1618, 56, 7575, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27699, 876, 1936, 62, 7714, "Subsubsection"],
Cell[29638, 940, 414, 12, 4738, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30089, 957, 1543, 50, 7575, "Subsubsection"],
Cell[31635, 1009, 398, 7, 6439, "Text"]
}, Open  ]],
Cell[32048, 1019, 2988, 106, 12435, "Subsubsection"],
Cell[35039, 1127, 1551, 56, 5116, "Subsubsection"],
Cell[36593, 1185, 942, 36, 3565, "Subsubsection"],
Cell[37538, 1223, 1518, 51, 8943, "Subsubsection"],
Cell[CellGroupData[{
Cell[39081, 1278, 1206, 36, 7393, "Subsubsection"],
Cell[40290, 1316, 386, 6, 6439, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40713, 1327, 542, 12, 5967, "Subsubsection"],
Cell[41258, 1341, 693, 16, 8626, "Text"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[41990, 1362, 120, 1, 83, "Section"],
Cell[42113, 1365, 129, 1, 83, "Section"],
Cell[42245, 1368, 101, 1, 83, "Section"],
Cell[CellGroupData[{
Cell[42371, 1373, 390, 10, 146, "Section"],
Cell[42764, 1385, 265, 7, 1608, "Input"]
}, Closed]],
Cell[43044, 1395, 181, 2, 83, "Section"],
Cell[43228, 1399, 354, 11, 83, "Section"],
Cell[43585, 1412, 353, 11, 83, "Section"],
Cell[43941, 1425, 433, 13, 146, "Section"],
Cell[44377, 1440, 158, 2, 83, "Section"],
Cell[CellGroupData[{
Cell[44560, 1446, 178, 2, 83, "Section"],
Cell[CellGroupData[{
Cell[44763, 1452, 273, 8, 68, "Input"],
Cell[45039, 1462, 169, 5, 65, "Output"]
}, Open  ]],
Cell[45223, 1470, 477, 14, 45, "Input"],
Cell[CellGroupData[{
Cell[45725, 1488, 721, 22, 45, "Input"],
Cell[46449, 1512, 73997, 1226, 375, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120483, 2743, 498, 16, 45, "Input"],
Cell[120984, 2761, 155, 4, 58, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

