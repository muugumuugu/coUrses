Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-14T00:52:16+05:30

====== integer sorting ======
Created Thursday 14 October 2021

===== Linear Time Sort =====
* assumes keys to be sorted are integers in some range, that is max/min are also parameters, and each fits in a word. assume min=0, max=k.
* can do all integer operations along with comparisons.

===== Counting Sort =====
* make a in-order counter array indexed by **k** keys and keep updating counters for frequency of counter.
* output the counter wise data
* eg - 3 5 7 5 5 3 6 3 → 3-3s, 2-5s, 1-6,1-7 → 3,3,3,5,5,6,7
* but what if i want to keep the data associated with the data?

==== Pseudocode for integer-indexed counting sort with data ====
L= array of k empty lists    → O(k)
for j in [0,1,...n)
	L[key(A[j])].append(A[j])  → O(1)
output=[]
for i in [0,1,2,3...k)
	output.concat(L[i]) → O(1)+1

==== efficiency ====
O(n+k)

===== Radix Sort =====
* imagine each integer as base b
* # digits = d =log_{b}k +1
* sort integers digit columnwise starting from least significant digits by counting sort
* each step is O(n+b)
* considering key function = mod of A[i] wrt b^{x } for the xth iteration. to be constant time,
* total time=O((n+b)d) = O((n+b)log_{k}n) → minimized @ b=O(n)
* O(nlog_{n}(k)) , which is linear if k=n^{O(1) }(that is, possible range of indices is polynomial in n)
