Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-12T00:57:59+05:30

====== insertion sort ======
Created Tuesday 12 October 2021

===== algorithm =====
* for i=1,2,3...n
* insert a[i] into correct position into sorted array A[0,i-1];
	* by comparing and swapping
* basically building a sorted array in place.

===== cost =====
O(n^{2}) cost
	* O(n) compares & O(n)swaps for each step
	* O(n) steps.
		* sometimes cost of compares is more than constant time, that weighs on the asymptotic efficiency.

===== binary serach instead of pairwise swaps =====
* taking the insert sort algorithm. since A[0,i-1] is sorted
* instead of pairwise comparisons and swaps
* do a a binary search on A[0,i-1] in O(lg(i))time
* O(nlg(n)) compares
* the insertion step brings about necessity to shift elements in the array → complexity remains O(n^{2}) for the swaps.

===== auxillary space =====
* requires one spot in temporary memory to keep the chosen element to insert, and one cache spot to perform the swap.
* O(1) auxillary space → //in place sort//
