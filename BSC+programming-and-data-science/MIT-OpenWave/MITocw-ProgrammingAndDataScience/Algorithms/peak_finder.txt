Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-10-12T16:49:38+05:30

====== peak finder ======
Created Tuesday 12 October 2021


===== One-D version: =====
* [a,b,c,d,e,f,g,..] = array
* position 2 is a peak iff b>=a and b>=c
* find a peak if it exists.
* for exact inequalities, peak may or may not exist, but for ≥ , peak always exists.

==== Naive algorithm ====
* start from left and check each element against its neighbours.
* worst case: peak is at the fringe end → O(n)

==== binary  algorithm ====
* check for peak in center,
* if it is not a peak, apply algorithm only to one half (the one where the peak condition fails)
* T(n)=T(n/2)+O(n)
	* O(n) for the 2 comparisons to check for peak.
	* T(1) =O(1)
* T(n) = ∑ (O(1)) for lg(n) times == O(lg(n))

===== 2-D version: =====
* elem in matrice is a peak iff it is ≥ all it's 4 neighbours.
	* generalizes to N-dimensions

==== greedy ascent algorithm ====
* makes choices about traversal rules
	* start
	* direction
	* edge hitting
* traverse through matrix and touch elements as u go and check for peak.
* O(nm) complexity

==== Binary 1D modified ====
* pick middle column, j=m/2
* find one-d peak @ (i,j)
* use (i,j) as a start to find a 1d peak on row i.
* but does not work, since 2D peak may not exist on row i.
--------------------
* more modifications:
	* instead of peak, find global max on the mid column
	* compare horizontal neighbours.
	* if conditions fire up, peak is found, else
	* pick the higher columns side of the matrix and repeat.
* T(n,m)=T(n,m/2)+O(n)
	* O(n) to find max
	* T(n,1)=O(n)
	* T(n,m)=∑(O(n) lg(m) times
* O(nlg(m))
