Computational Thinking
Tutorial 4.2
Nested Iterations
Naive Approach and Binning Approach
Hello, CT students you must have seen the lecture by the professors on nested iterations where
they use the naive approach and the binning approaches. So, there they were trying to find out a
common birth date in this course data set. In this tutorial we will look at a very similar task
where we try to find score cards with the same mathematics score from the same place.
(Refer Slide Time: 0:40)
So, this is the data set as you know, since we only need these two fields in particular, let us look
at a more focused version of this data set along with the pseudocode.
(Refer Slide Time: 0:52)
So, here this is the pseudocode and we are looking at the scorecard data set here, we now begin
with initializing the count variable to 0 and there is this table 1 which is here and there is also
mention of table 2 and table 3, which are placed below table 1. Now, let us begin count has been
initialized to 0, while table 1 has more rows.
So, table 1 has rows now, read the first row X in table 1, so this would be the first row X in table
1 and move X to table 2, so we take this and we go off to table 2. After this is done while table 1
has more row, so are there still more rows in table 1? Yes. Read the first row Y of table 1, so this
is the first row Y of table 1 and if X dot place is equal to Y dot place, so Y dot place here is
Salem, X dot places erode, they are not equal, this entire AND condition is not satisfied, so we
do not get inside this if block.
After that what we do? We move Y to table 3, this is our Y and we are moving it off to table 3
and now we go back to this part while table 1 has more rows and again we do the same thing
here the next row is this Chennai is not the same as erode, so we move this off to table 3 and we
keep doing this in this way again a Chennai not erode, so move it of the table 3.
Now, Madurai, so moving it down, now another Chennai, so moving it down, now Ambur, so
move it down, now Vellore move it down, Bengaluru, so move it down, again Bengaluru, so
move it down, Chennai, Bengaluru, Chennai, Madurai, Trichy, Theni, Trichy again, Chennai and
now we have a situation where X dot place and Y dot place are the same, this is an Erode card.
Then we look at the second part of the AND statement, which is X dot mathematics and Y dot
mathematics are they equal? It is not mathematics is 68, Y dot mathematics is 72 they are not
equal, so we do not do anything again we go on to the next line of code which is to move this
card to table 3.
Now, Trichy, Vellore, Bengaluru, Nagercoil, Bengaluru again, Madurai again, Chennai,
Chennai, Madurai, Madurai and Vellore. So, now table 1 is empty, so this condition is not
satisfied we are now out of the while loop. Once we are out of this while loop, we now go to the
next line of code, which is move all rows from table 3 to table 1.
(Refer Slide Time: 6:26)
So, we empty table 3 and move it all to table 1, so we are now they are all back in table 1 and
table 3 is empty.
(Refer Slide Time: 6:49)
And after that while table 1 has more rows, so table 1 again has more rows, now again read the
first row X in table 1 which is this one and move it to table 2. So, we have moved it to table 2.
Now, X is this row, X dot place the Salem, so we again do the same procedure of taking each
row looking if it is Salem or not and as you can see none this is Salem, so one by one we drop off
these rows into table 3. Now table 1 is empty again, so we move all these rows back to table 1.
(Refer Slide Time: 8:12)
Now, again the first row X in this table is this where we have Chennai as the place, so this is our
X dot place and then we start looking here this is Chennai, so we now verify if the maths score is
same. This is 57, this is 42, so they are not same so we move this row down. Now, the next one
is Madurai and now again it is a Chennai and the mathematics score is 71 which is not equal to
57, so this also goes down.
And here we have a Chennai again and the mathematics score is 64 which is not 57, so this goes
down too. This is a Chennai again mathematics score is only 52, so this goes away, now another
Chennai and mathematics score is 62 not equal to 57 this goes down., here we have a Chennai
again with mathematics score 87 not equal to 57. And again Chennai, but 74, now table 1 is
empty, so we move all the rows from table 3 to table 1.
(Refer Slide Time: 10:23)
And now, we have this is our row X and we bring it down to table 2, here the place is Chennai
and maths score is 42, so let us begin again. Now, the place is Chennai, but maths score is not
42, now here place is Chennai, but match score is not 42, here the place is Chennai but the maths
score is not 42, Chennai again maths score is not 42. Now, this is Chennai, but my score is not
42, again Chennai, but not 42. Now, table 1 is empty, we come out of this particular while block
and remove all these rows again back to table 1.
(Refer Slide Time: 11:59)
Now, this is row X, which we move to table 2, place is Madurai maths score is 87. Going back
into this while loop. Now, we have a Madurai, but maths score does not match, here is another
Madurai but maths score is not 87, another Madurai, but maths score is not 87, one more
Madurai but maths score does not match, table 1 is empty, so we move all the rows from table 3
to table 1.
(Refer Slide Time: 13:16)
Now, row X is this which we move to table 2, the place is Chennai the match score is 71. Here it
is Chennai, but not 71, Chennai but not 71, Chennai but not 71, Chennai but not 71, Chennai but
not 71, table 1 is empty now, so we move all the rows from table 3 to table 1.
(Refer Slide Time: 14:31)
Now, this is our row X which we move to table 2, the place is Ambur the maths score is 81. So,
now table 1 is empty which means there is only 1 Ambur card, anyway now we move all the
rows from table 3 to table 1 again.
(Refer Slide Time: 15:15)
Now, our row X is this which we carry down to table 2, so Vellore 84, here this is a Vellore but
the score is not 84, one more Vellore, but the score is not 84 and table 1 is empty. So, we move
back all the table 3 goes to table 1.
(Refer Slide Time: 16:13)
Now, this is our row X taken to table 2, Bengaluru 74, this is a Bengaluru, but the score is not 74.
Again Bengaluru but not 74, again Bengaluru but not 74, Bengaluru but not 74, no more rows in
table 1, so we move table 3 rows back to table 1.
(Refer Slide Time: 17:19)
Now, this is our row X which is been carried to table 2, this is Bengaluru 63, this is a Bengaluru
but not 63, Bengaluru but not 63, Bengaluru but not 63, table 1 is empty, so we move these rows
back.
(Refer Slide Time: 18:12)
Now, this is our row X, let us move to table 2, this is Chennai 64, this is Chennai but not 64, this
is Chennai but not 64, Chennai but not 64, Chennai but not 64, table 1 is empty, so bring all these
rows back.
(Refer Slide Time: 19:03)
This is our row X now, we move it to table 2, so Bengaluru 97, this is Bengaluru but not 97.
Now, this is Bengaluru and the maths score is 97, which is identical to our card X here. So, this
is common and we finally enter this portion of the code where we increment count to 1. So, we
found one pair of cards with same place and same mathematics score. And then we get back to
the same business of moving this down, table 1 is now empty, so we carry these rows back to
table 1.
(Refer Slide Time: 20:23)
This is our row X now, which is being carried to table 2, this is Chennai 52. This is Chennai but
not 52, again Chennai not 52, Chennai but not 52, table 1 is now empty, so we go to table 3 pick
up all these rows and again take them to table 1.
(Refer Slide Time: 21:08)
This is our row X now, we carry it to table 2, drop it here in table 2, it is Madurai 65, another
Madurai but not 65, Madurai but not 65, Madurai but not 65, so table 1 is now empty, so again
we carry table 3 rows and drop them over there.
(Refer Slide Time: 21:51)
Now, this is our row X which is moved to table 2, it is Trichy 89. Now, this is Trichy 87, it is not
89, it is Trichy not 89, table 1 is empty so we again pick up these rows from table 3 and carry
them up.
(Refer Slide Time: 22:40)
Now, this is our row X we drop it in table 2 this is Theni 76, table 1 is empty again, there was
only 1 Theni card then, not Theni cards otherwise, now we take these rows and go drop them
here.
(Refer Slide Time: 23:12)
This is our row X now, its Trichy 87, it is Trichy but not 87, table 1 is empty again, we carry
these rows drop them there.
(Refer Slide Time: 23:53)
This is row X now. This is Chennai 62, this is Chennai but not 62, this is Chennai but not 62,
table 1 is again empty, we pick up these rows drop them here.
(Refer Slide Time: 24:44)
This is row X now, which is Erode 72, table 1 is empty again these rows go up.
(Refer Slide Time: 25:22)
This is row X now, which is Trichy 56, table 1 is empty.
(Refer Slide Time: 25:51)
This is our row X now, which is Vellore 93. Now, this is Vellore but not 93, so table 1 is empty.
(Refer Slide Time: 26:30)
This is row X, Bengaluru 78, this is Bengaluru but 97 not 78, table 1 is now empty, bring back
these rows from table 3.
(Refer Slide Time: 27:02)
This is row X now that is Nagercoil 62, table 1 is empty, bring this back.
(Refer Slide Time: 27:32)
This is our row X, which is Bengaluru to 97. Table 1 is empty, so bring back this.
(Refer Slide Time: 27:57)
This is our row X now which is Madurai 44. This is Madurai but not 44, again Madurai but not
44, table 1 is empty again.
(Refer Slide Time: 28:46)
This is row X, which is Chennai 87, this is Chennai but not 87, table 1 is empty again.
(Refer Slide Time: 29:05)
This is our row X now, which is Chennai 74, table 1 is empty again.
(Refer Slide Time: 29:21)
This is row X now and it is Madurai 81, this is Madurai but not 81, table 1 is empty again, we
bring back the rows.
(Refer Slide Time: 29:42)
This is row X now, which is Madurai 74 this is Vellore, it goes to table 3, now table 1 is empty.
So, we are out of this block we have to do this line of code now which is carrying back this row
here and now while table 1 still has rows, table 1 has 1 row
(Refer Slide Time: 30:17)
Read the first row, which is this, this is our row X, move it to table 2. And now while table 1 has
more rows is not satisfied, table 1 is now empty. So, we just come here and we also see that table
3 is also empty, so we go back to the top which again checks whether table 1 has more rows, it
does not, so we are out of this while loop and this code is done. And we have done a lot of
iterations, we have done over all 435 comparisons, that would be 30 into 29 by 2, according to
the formula used by the process. Now let us, look at what happens in binning.
(Refer Slide Time: 31:11)
Now, here we are going to try the binning approach and we are going to bin according to the
place, so all rows of one place will be binned together, this is the pseudo code for that and here
we see these various tables, table Ambur, table Bengaluru, table Chennai etc. So, all these tables
we have placed them under table 1, which are like this. And what this code tells us to do is while
table 1 has more rows, so we go through table 1 pick row by row read the first row X in table 1,
so we pick row by row and then if depending on X
s place, we move it to that corresponding
table.
So, let us do this one by one now, here this is our row X now, this is Erode, so we take it to
Erode
s table. So, that is in table Erode and likewise this goes to the Salem table, this goes to
Chennai table, again Chennai table, Madurai table, Chennai table again, Ambur table, table
Vellore, table Bengaluru, Bengaluru again, Chennai, Bengaluru again, Chennai, Madurai, Trichy,
Theni, table Trichy, Chennai, table Erode, table Trichy, table Vellore, Bengaluru is here.
Table Nagercoil, one more Bengaluru, Madurai table, Chennai table, table Chennai again, one
more Madurai table and one more for table Madurai and lastly, we have one for table Vellore.
Now, table 1 is empty, there are no more row. So, we are out of this while loop, so binning is
over, there is nothing outside of the loop for us now.
(Refer Slide Time: 34:25)
And now once the binning is done for each of these tables, we run this code which is pretty much
identical to what we had done with table 1 earlier here. However, we run it for each city table,
so we run it for table Ambur, we run it for table Bengaluru, we run it for table Chennai. So, on
for every city table. The code is very much the same you read the first row X in that particular
city table you move it, you move that row to table 2 and while that city table still has more rows
you read the first row in that city table.
And here the only difference is in the if condition we do not have an AND statement because we
no longer need to check for the same place. Because every row in that particular city table will
have the same place, so we are only checking for mathematics scores and in case they are equal
then we increase the count. And after that we move this Y row to table 3 and finally all table 3
rows are moved back to the city table. So, this way this code is very, very much identical to what
we had done earlier except now we do it city by city. So, we can now look at the number of
comparisons it is going to take. For that let us look at how many rows are there per city.
(Refer Slide Time: 35:58)
So, here we see the number of comparisons that we do per city. So, per table how many
comparisons comes out and this goes to the formula n into n minus 1 by 2 where n is the number
of rows in that particular table.
So, Ambur has only 1 row, so you will get 1 into 0 by 2, which is 0 comparisons, Bengaluru has
1, 2, 3, 4, 5, 5 rows, so you get 5 into 4 by 2 that is 10, Chennai has 1, 2, 3, 4, 5, 6, 7, 8, so 8 into
7 by 2 which is 28. And Erode has 2, so 2 into 1 by 2, which is 1, Madurai has 5 so 5 into 4 by 2
which is 10 again.
Nagercoil is a single row table, so you will get 0 comparison, Salem has 0 comparisons, Theni
also has 0 comparisons, Trichy there are 3 rows, so 3 into 2 by 2, which has 3 comparisons, same
with Vellore 3 rows 3 into 2 by 2 is 3 comparisons. And the total number of comparisons is now
only 55. Earlier in the table 1 we had done 435 comparisons overall.
So, this wave binning drastically reduces the number of comparisons, if the data is reasonably
distributed across various bins. As the professors have indicated, if all the rows were to go into
one table suppose everybody is from the same city, then you will again have to do 435
comparisons, but here they are quite distributed therefore we have gotten much lesser number of
comparisons. Thank you.
