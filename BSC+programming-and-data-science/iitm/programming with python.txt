Key Points:
1. You need a language to communicate with your computer.
2. Python is easy to learn, easy to understand, powerful  and widely used programming language
3. A human being will talk/instructs  to to the computer (communicate) via Python (programming language) to perform complex tasks REALLY FAST.
4.  Understand 1. Learning Python is a SKILL 2. Only way to master a SKILL is via DOING it 3. Watch 10k hours of video(passive learning) will not help in mastering instead START CODING(active learning).
5. To become a better programmer, start ACTIVELY LEARNING.

----------------------------------------------------------------------------------------------------
+ how to use Replit:  -
+ print to console:
+ important note:

----------------------------------------------------------------------------------------------------
+ files:
+ settings:  (code intelligence)
+ print with , :
+ print numbers:
+ print multiple types:
+ conclusion on print:
+ print syntax:
+ quotes:

----------------------------------------------------------------------------------------------------
+    (conclusion)  (example) (remark)

----------------------------------------------------------------------------------------------------
Following is the operator precedence in Python:
Operators	Meaning
()	Parentheses
**	Exponent
+x, -x, ~x	Unary plus, Unary minus, Bitwise NOT
*, /, //, %	Multiplication, Division, Floor division, Modulus
+, -	Addition, Subtraction
<<, >>	Bitwise shift operators
&	Bitwise AND
^	Bitwise XOR
|	Bitwise OR
==, !=, >, >=, <, <=, is, is not, in, not in	Comparisons, Identity, Membership operators
not	Logical NOT
and	Logical AND
or	Logical OR

Notes:
1. 10 * 2 / 5 --> here * and / are of same precedence in such case the precedence takes place from left to right. eg: 10 * 2 / 5 --> 4.0 and 10 / 2 * 5 --> 25.0
2. when a = 10, b = 5 then a//b --> 10//5 --> 2  a%b --> 10%5 --> 0 (reminder)
3. when a = 5, b = 10 then a//b --> 5//10 --> 0  a%b --> 5%10 --> 5 (numerator). therefore in modulo division when numerator is less than that of denominator numerator % denominator == numerator value.

----------------------------------------------------------------------------------------------------
In general Python has 3 types of operators: LAR (logical, arithmetic and relational)
logical: and, or, not
arithmetic:  + - * / // %
relational: < > <= >= == !=
----------------------------------------------------------------------------------------------------
+ 2 brothers story:
+ comments:

----------------------------------------------------------------------------------------------------
+ dynamic typing:
+ float and real numbers:

----------------------------------------------------------------------------------------------------
none exists

----------------------------------------------------------------------------------------------------
+ keywords:   (example) (example)
+ rules for naming a variable: (rule#1) (example) (rule#2)  (rule#3)(example)
+ multiple assignment of values to a variable: (one way)(second way)
+ swap variable values:
+ del x:
+ shorthand operator:
+ in operator:  (analogy) (example)
+ chaining operators:   (conclusion)
rules of variable names:
1. Only can use alphanumeric (alphabets and numbers) and _
2. _a, a1, _a1 can be used as variables
3. only can start a variable name with either alphabet or _
4. variable names are case sensitive
Notes:
multiple assignment of variables:
x, y = 1, 2
x = y = z = 10
x, y, z = 'hey', 10, 3.14
x,y = y, x
x, z, y = z, x, y
delete a variable:
a = 10
del a
print(a) //shows error
in keyword:
print('alpha' in 'alpha beta gamma') //True
print('a' in 'zlphz betz gzmmz')     //False


----------------------------------------------------------------------------------------------------
Notes:
1. Escape sequences allow you to include special characters in strings. To do this, simply add a backslash (\) before the character you want to escape.
2. print( 'Hey, what\'s up?') --> 'Hey, what's up?'
3. print("Multiline strings\ncan be created\nusing escape sequences.") results in the following
Multiline strings
can be created
using escape sequences.
4. print(r"Backslashes \ don't need to be escaped in raw strings.")
Backslashes \ don't need to be escaped in raw strings.
note: unescaped backslashes at the end of a raw string will cause and error
5.
Escape Sequence	Meaning
\newline	                        Backslash and newline ignored
\\	                                Backslash (\)
\'	                                Single quote (')
\"	                                Double quote (")
\a	                                ASCII Bell (BEL)
\b	                                ASCII Backspace (BS)
\f	                                ASCII Formfeed (FF)
\n	                                ASCII Linefeed (LF)
\r	                                ASCII Carriage Return (CR)
\t	                                ASCII Horizontal Tab (TAB)
\v	                                ASCII Vertical Tab (VT)
\ooo	                        Character with octal value ooo
\xhh	                        Character with hex value hh

+ 6. quotes in multiple line string:
+ 7. triple quote :
+ 8. single, double and triple quote:

----------------------------------------------------------------------------------------------------
Notes:
There are 6 types of in-built string methods in Python, they are:
1. lower(), upper(), capitalize(), title(), swapcase()
2. islower(), isupper(), istitle()
3. isdigit(), isalpha(), isalnum()
4. strip(), lstrip(), rstrip()
5. startswith(), endswith()
6. count(), index(), replace()

+ methods:  (table)
+ string methods:  (lower( ) ) (upper( ) ) (capitalize( ) ) (title( ) )  (swapcase( ) )  ( islower( ) isupper( ) and istitle( ) ) (isdigit( ) isalpha( ) isalnum( ))
+  (strip( ) lstrip( ) rstrip( ))  (startswith( ) endswith( )) (count( )  index( ) replace ( ))

----------------------------------------------------------------------------------------------------
+ #1 Find whether the given number is odd or even:
+ #2 Find whether the given number ends with 0 or 5 or any other number
+ #3 Find the grade of students based on given marks
+ #4 Convert given flowchart into Python Code

my code:
#1
i = int(input())
if(i%2 == 0):
  print('even')
else:
  print('odd')


#2
num = 0
if (num % 10 == 0):
  print(0)
elif (num % 5 == 0):
  print(5)
else:
  print('other')

#3
marks = int(input())
if (marks >= 0  and marks <=100):
  if (marks >=90):
    print('A')
  elif (marks >=80 and marks <90):
    print('B')
  elif (marks >=70 and marks <80):
    print('C')
  elif (marks >=60 and marks <50):
    print('D')
  else:
    print('E')
else:
  print('invalid entry')

#4
print('Start')
print('Travel from City A to City B')

time = input('enter time as either shorter or longer\t')
time.lower()
if(time == 'shorter'):
  price = input('enter price as either lower or higher\t')
  price.lower()
  if(price == 'lower'):
    print('Red Eye Flight')
    print('Reached City B')
    print('Stop')
  elif(price == 'higher'):
    print('Daytime Flight')
    print('Reached City B')
    print('Stop')
  else:
    print('invalid price input')
elif(time == 'longer'):
  price = input('enter price as either lower or higher\t')
  price.lower()
  if(price == 'lower'):
    print('Coach')
    print('Reached City B')
    print('Stop')
  elif(price == 'higher'):
    print('Train')
    print('Reached City B')
    print('Stop')
else:
    print('invalid price input')

----------------------------------------------------------------------------------------------------
notes for quick recap:
 (calculator example)
+ (import math)
+  (analogy)
 (executing without importing)
+  (import random)
+  (#let us simulate a coin toss)
 (note)
+   (dice example)
+  (two dice simulation)

Notes:
1. To know the information of all the methods for a given module/library, try askpython(dot)com and try searching the module name or alternatively use Google
2. my code:
import random

input('heads or tails ? \t')
if (random.randrange(0, 2)==0):
  print('its heads')
else:
  print('its tails')

----------------------------------------------------------------------------------------------------
+   (import calendar)    {method I}
+    (from calendar import *)  {method II}
 (commenting a multiline code)
 (difference between 2 methods)
 (summary)
+    (optimum way)
+   (import calendar as c)    {method III}
+  ( from calendar import month as m)      {method IV}
 (full summary)

----------------------------------------------------------------------------------------------------
+ example statement:
+ if vs while:
+ example:

----------------------------------------------------------------------------------------------------
Great clarity and excellent examples, thank you 🙏

----------------------------------------------------------------------------------------------------
+ factorial example:

----------------------------------------------------------------------------------------------------
+ factorial:
+ digits:
+ reverse:
+ palindrome:

----------------------------------------------------------------------------------------------------
can we also not use while loop and do it?
num = int(input())
s = str(abs(num))
if num>=0:
  print(int(s[::-1]))
else:
  print(int('-'+(s[::-1])))

----------------------------------------------------------------------------------------------------
+ copy paste:
+ for loop:    (range)  (indent error) (tab)
+ looping:
+ example:

----------------------------------------------------------------------------------------------------
+ problem statement:
+ solution: (modification)

----------------------------------------------------------------------------------------------------
+ problem definition:
+ solution:   (error) (error free)
+ example:

----------------------------------------------------------------------------------------------------
+    (step parameter)
 (three parameters)
 (descending order)
 (odd numbers in reverse order)
 (for without range)
 (for each)

----------------------------------------------------------------------------------------------------
+  (end = ' ')
 (date format)
 (comma, sep)
+   (end and sep)
+  (formatted printing)
 (.format)
 (string modulo operator)
+  (example)
+   (format specifier)
 (example of format specifier)
 (summary)

----------------------------------------------------------------------------------------------------
 (factorial)
+     (factor while vs for)
 (digits example)
 (reverse the digits example)
 (palindrome)
 (problem statement - ideal loop)

----------------------------------------------------------------------------------------------------
+ nested for loop example:

----------------------------------------------------------------------------------------------------
+ #1:
+ #2:
+ #3:
+ #4:

----------------------------------------------------------------------------------------------------
+ lists:
+ l.append():
+ duplicity:
+ l.remove():   (repeated elements) (first occurance)
+ matrix:
+ nested lists:
+ accessing list elements:

----------------------------------------------------------------------------------------------------
+ random.random():
+ random.randint():
+ birthday paradox:
+ l.sort:
+ repetition:  (proof)
+ simulation:

----------------------------------------------------------------------------------------------------
Does this work?
l = []
for i in range(60):
  l.append(random.randint(1,365))
l.sort()
for i in range(len(l)-1):
  if(l[i] == l[i+1]):
    print('repeats', l[i], l[i+1])

----------------------------------------------------------------------------------------------------
+ create a list of random numbers:
+ checking for an element:
+ call repeatedly:
+ bottom line:

----------------------------------------------------------------------------------------------------
+ l.sort():
+ sorting:

----------------------------------------------------------------------------------------------------
+ sum of all elements in list:

----------------------------------------------------------------------------------------------------
+ matrix addition:

----------------------------------------------------------------------------------------------------
+ matrix multiplication: (visualization)
+ any given element:
+ observation: (color notation)

----------------------------------------------------------------------------------------------------
Goal of the Lecture: Convert the mathematical formula for matrix multiplication into a piece of code.
+ matrix multiplication definition:
+ method:
+ comments to code:
+ numpy:

----------------------------------------------------------------------------------------------------
Deeper Delicacies of Deep Learning!
Commonsense to Code!
Coding Complexity!

----------------------------------------------------------------------------------------------------
+ ascending order:
+ min element in list:
+ obvious sort:
+ moral of the story:

----------------------------------------------------------------------------------------------------
Learning Outcomes: 1. Modular approach. 2. Use functions to compute product of two matrices.
+ recap:
+ matrix initialization:
+ dot product:
+ row matrix:
+ column matrix:
+ multiplication of two matrices:
+ moral of the story:

----------------------------------------------------------------------------------------------------
+ concept of compound interest:
+ recursion examples:
+ note:

----------------------------------------------------------------------------------------------------
+ sum of n natural numbers:
+ recursion :
+ note on recursion in python:
+ compound interest:
+ factorial:
+ note:

----------------------------------------------------------------------------------------------------
+ arguments vs parameters:
+ argument order vs parameter order:
+ positional arguments:
+ keyword arguments:
+ missing positional argument error:
+ default arguments:
+ time to wonder:
+ combination:

----------------------------------------------------------------------------------------------------
+ analyzing code:
+ call by value and scope of a variable:
+ call by value:
+ local variable vs global variable:
+ global variable:
+ local variable:
+ global keyword:

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
At the end of this video, the student will be able to do the following:
1. Understand lists in more detail.
2. Understand a new container - sets.
3. Learn the differences between lists and sets.
+ car-bus analogy:  (conclusion)
+ list vs set demonstration:
+ difference:  (list) to
+ sys.getsizeof():
+ set object is not subscriptable:
+ when to use set and when to use list:  (s.add()) (set:  ) (list: )

----------------------------------------------------------------------------------------------------
+ idea behind dictionary:
+ use of dictionary:
+ example:
+ imp note:
+ max:
+ dictionary illustration:

----------------------------------------------------------------------------------------------------
+ analogy:
+ [], {}, ():
+ list methods vs tuple lists (inbuilt): (11)(2)
+ access but cannot add:
+ tuple is unchangeable:  (immutable)
+ list can be changed: (mutable)
+ why?:
+ hidden benefit of tuple:
+ s.__sizeof__():
+ summary: (use tuple when have huge data and remains to be unchanged)

list vs set vs tuple:
import string
s = string.ascii_letters
l = list(s)
ss = set(s)
t = tuple(s)
print(s)
print('as list {}'.format(l))
print('as set {}'.format(ss))
print('as tuple {}'.format(t))

Output: (set is unordered and random)
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
as list ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
as set {'Q', 'e', 'x', 'V', 'X', 'Y', 'T', 'E', 'f', 'u', 'R', 'y', 'k', 'S', 'L', 'U', 'v', 'q', 'z', 'c', 'i', 't', 's', 'H', 'K', 'B', 'M', 'a', 'r', 'd', 'D', 'b', 'l', 'C', 'W', 'F', 'w', 'j', 'g', 'I', 'A', 'h', 'J', 'o', 'G', 'P', 'Z', 'p', 'N', 'm', 'n', 'O'}
as tuple ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')

----------------------------------------------------------------------------------------------------
+ operations on lists:  (concatenation)  (multiplication)  (==) (<)
+ mutability:
+ immutable string:
+ internal implementation of lists:
+ copy a list 3 ways:   (I) (II)(III)
+ pointing to memory location:  (is keyword)
+ local vs global variable: (list)
+ call by reference vs value: (if function argument is of mutable type, it is called call by reference, otherwise call by value)
+ list methods:

----------------------------------------------------------------------------------------------------
@NAVEEN US welcome :)

----------------------------------------------------------------------------------------------------
+ mutability:
+ tuples:
1. can access elements inside the tuple 2. slicing of tuples are possible 3. tuples are iterable
+ packing and unpacking:
+ interesting examples: (  (,)) ( )
+ hashable:
+ tuple is hashable: (values inside tuples are not mutable)
+ tuple is not hashable: (values inside tuples are mutable)

----------------------------------------------------------------------------------------------------
+ dictionary structure:(key value pair)
+ unique key:
+ duplication of values allowed:  (all of the above)
+ dictionary key: (int, float, bool, string, tuple(yes and no)())
+ valid dictionary key:
+ basic properties of dictionaries:  (I)(II)(call by reference)
+ iterate over a dictionary:
+ dictionary methods:
note: d.keys() and d.values() returns a list whereas d.items() returns a tuple

----------------------------------------------------------------------------------------------------
Notes:
#only hashable items can be added to a set using s.add()
s = {1,2,3}
s.add(5)
print(s)
s.add('d')
print(s)
s.add((1,2,3))
print(s)

output:
{1, 2, 3, 5}
{1, 2, 3, 5, 'd'}
{1, 2, 3, 5, 'd', (1, 2, 3)}

+ Note: Non-Hashable cannot be added: Eg:  s.add([1,2,3]), s.add({11,22,33}), s.add({,}) result in error 'unhashable type'

#from set theory
S = {1,2,3,4,5,6}
O = {1,3,5}
E = {2,4,6}

print(O.union(E),'same as', O | E)
print(S.intersection(E),'same as', S & E)
print(S.difference(E),'same as', S - E)
print(O.issubset(S))
print(S.issuperset(O))

Output:
{1, 2, 3, 4, 5, 6} same as {1, 2, 3, 4, 5, 6}
{2, 4, 6} same as {2, 4, 6}
{1, 3, 5} same as {1, 3, 5}
True
True

----------------------------------------------------------------------------------------------------
+ Topics & overview:
+ recursion 'rumor' example:
+ recursion 'vessels cleaning' example:
+ observation#1:
+ recursion 'live your life one day at a time' example:
+ recursion 'covid' example:
+ observation#2:

----------------------------------------------------------------------------------------------------
+ The rumor example at reminds me of term1 recursion example:
Procedure Listsum(l):
     if (l = [ ]) {
          return 0
          }
     else {
          return(first(l) + Listsum(rest(l)))
          }
End Listsum


----------------------------------------------------------------------------------------------------
+ checkzero problem statement:
+ checkzero example:
+ factorial example:
+ sum of n numbers example:
+ checkzero psuedo code:

----------------------------------------------------------------------------------------------------
+ problem statement :
+ solution:  (minimum element function)

----------------------------------------------------------------------------------------------------
+ 20 question game:
+ halving example:
+ dictionary example:   (conclusion)
+ binary search:
+ list problem statement:

----------------------------------------------------------------------------------------------------
+ problem statement:  solution:
+ time.time():
+ observations:
+ middlemost element of a sorted list:
+ testing time taken:
+ list traversing:
+ summary:

----------------------------------------------------------------------------------------------------
+ problem statement:
+ idea:
+ solution:
+ conclusion:
+ fact:


----------------------------------------------------------------------------------------------------
+ program:
+ summary:
+ the dangers of recursion:  (nudge effect)

----------------------------------------------------------------------------------------------------

read very big files line by line linearly, just how movie files are read on a computer, frame by frame.
----------------------------------------------------------------------------------------------------
f.read(n)-- reads n characters, move cursor.
f.seak(n)-- moves character wrt beginning of file - if storage contiguous like array - fast , else slow :(
----------------------------------------------------------------------------------------------------



pandaaas

----------------------------------------------------------------------------------------------------\












-----------------------------------------------------------------------------------------------------
+ inheritance and method overriding intro:
+ example code:
+ observation:  (repetition/duplication)

+ parent class:
+ 'Is A' relationship:
+ inheritance:
+ modular coding example:
+ security: (__)
+ private members:
+ subtypes of inheritance:
+ types:


----------------------------------------------------------------------------------------------------
except Exception as e:
       print(e)

----------------------------------------------------------------------------------------------------
