        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iñigo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/distgradfunctions2d/distgradfunctions2d.htm">2D distance and gradient functions - 2019</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">

<!-- --------------------------------------------------------------------------------- -->

<style>
.parts{ display:flex; }
.part1 { padding-right:64px; padding-bottom:48px;}
.part2 { padding-right:0px;  padding-bottom:48px;}
@media only screen and (max-width: 1280px)
{
  .parts { flex-direction:column;}
  .part1 { padding-right:0px;  padding-bottom:0px; width:100%; }
  .part2 { width:100%; }
}
</style>


<!---------------------------------------------------------------------------->

<h3>Intro</h3><hr>
We know that proper 2D and 3D SDFs have a gradient of length 1.0 everywhere, since SDFs measure distances, and the rate of change of distance with respect to distance will always be the identity. However, knowing the exact direction of the gradient is useful for computer graphics (for lighting, aligning objects to surfaces, etc etc). Of course, one can use <a class="regular" href="../normalsSDF/normalsSDF.htm">central differences to compute gradients</a>, but that has a high computational cost and can get tricky to tweak. Automatic differentiation works well with SDFs of course, but comes with a cost.<br>
<br>
In this page you'll find a list of primitives and operators and their analytic gradients that I developed around 2020, where lots of terms are reused between the SDF computation and its gradient computation, making them very cheap. The list is incomplete, so feel free to carry on all primitives and operations that I haven't defined with automatic differentiation/duals. Also, this list just contains <a class="regular" href="../distfunctions2d/distfunctions2d.htm">2D SDFs</a>, but extending them to 3D through <a class="regular" href="../distfunctions/distfunctions.htm">revolution or extrusion</a> is pretty easy.<br>
<br>
Lastly, note that all the primitives listed here come with a link to a realtime online demo in Shadertoy. In fact, this public playlist contains all the shadertoy examples: <a href="https://www.shadertoy.com/playlist/M3dSRf">https://www.shadertoy.com/playlist/M3dSRf</a>, so don't miss that out.<br>
<br>
<br>
<h3>Primitives</h3><hr>
All primitives are centered at the origin; you will have to transform the point to get arbitrarily rotated, translated and scaled objects, and transform the gradient back accordingly (remember not to use non uniform scales since such transforms do not preserve distances). All SDFs below return the actual distance in the .x component, and its partial derivatives with respect to x and y in the .y and .z components. In other words,<br>
<br>
.x = f(p)<br>
.y = &part;f(p)/&part;x<br>
.z = &part;f(p)/&part;y<br>
.yz = &nabla;f(p) with &Vert;∇f(p)&Vert; = 1<br>
<br>
<br>
<br>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx00.png"></div>
<div class="part2"><b>Circle</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WltSDj">https://www.shadertoy.com/view/WltSDj</a>)<br><br>
<div class="code"<span class="code">vec3 sdgCircle( in vec2 p, in float r ) 
{
    float d = length(p);
    return vec3( d-r, p/d );
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx08.png"></div>
<div class="part2"><b>Pie</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/3tGXRc">https://www.shadertoy.com/view/3tGXRc</a>)<br><br>
<div class="code"<span class="code">// sc = sin/cos of aperture
vec3 sdgPie( in vec2 p, in vec2 sc, in float r )
{
    float s = sign(p.x); p.x = abs(p.x);
    float l = length(p);
    float n = l - r;
    vec2  q = p - sc*clamp(dot(p,sc),0.0,r);
    float m = length(q) * sign(sc.y*p.x-sc.x*p.y);
    vec3  res = (n&gt;m) ? vec3(n,p/l) : vec3(m,q/m);
    return vec3(res.x,s*res.y,res.z);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx10.png"></div>
<div class="part2"><b>Arc</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WtGXRc">https://www.shadertoy.com/view/WtGXRc</a>)<br><br>
<div class="code"<span class="code">// sc = sin/cos of aperture
vec3 sdgArc( in vec2 p, in vec2 sc, in float ra, in float rb )
{
    vec2 q = p;
    float s = sign(p.x); p.x = abs(p.x);
    if( sc.y*p.x &gt; sc.x*p.y )
    {
        vec2  w = p - ra*sc;
        float d = length(w);
        return vec3( d-rb, vec2(s*w.x,w.y)/d );
    }
    else
    {
        float l = length(q);
        float w = l - ra;
        return vec3( abs(w)-rb, sign(w)*q/l );
    }
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx03.png"></div>
<div class="part2"><b>Segment</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WtdSDj">https://www.shadertoy.com/view/WtdSDj</a>)<br><br>
<div class="code"<span class="code">vec3 sdgSegment( in vec2 p, in vec2 a, in vec2 b, in float r )
{
    vec2 ba = b-a, pa = p-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    vec2  q = pa-h*ba;
    float d = length(q);
    return vec3(d-r,q/d);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx09.png"></div>
<div class="part2"><b>Vesica</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/3lGXRc">https://www.shadertoy.com/view/3lGXRc</a>)<br><br>
<div class="code"<span class="code">vec3 sdgVesica(vec2 p, float r, float d)
{
    vec2 s = sign(p); p = abs(p);
    float b = sqrt(r*r-d*d);
    if( (p.y-b)*d&gt;p.x*b )
    {
        vec2  q = vec2(p.x,p.y-b);
        float l = length(q)*sign(d);
        return vec3( l, s*q/l );
    }
    else
    {
        vec2  q = vec2(p.x+d,p.y);
        float l = length(q);
        return vec3( l-r, s*q/l );
    }
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx01.png"></div>
<div class="part2"><b>Box</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/wlcXD2">https://www.shadertoy.com/view/wlcXD2</a>)<br><br>
<div class="code"<span class="code">vec3 sdgBox( in vec2 p, in vec2 b )
{
    vec2 w = abs(p)-b;
    vec2 s = vec2(p.x&lt;0.0?-1:1,p.y&lt;0.0?-1:1);
    float g = max(w.x,w.y);
    vec2  q = max(w,0.0);
    float l = length(q);
    return vec3(   (g&gt;0.0)?l  :g,
                s*((g&gt;0.0)?q/l:((w.x&gt;w.y)?vec2(1,0):vec2(0,1))));
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx02.png"></div>
<div class="part2"><b>Cross</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WtdXWj">https://www.shadertoy.com/view/WtdXWj</a>)<br><br>
<div class="code"<span class="code">vec3 sdgCross( in vec2 p, in vec2 b ) 
{
    vec2 s = sign(p); p = abs(p); 
    vec2  q = ((p.y&gt;p.x)?p.yx:p.xy) - b;
    float h = max( q.x, q.y );
    vec2  o = max( (h&lt;0.0)?vec2(b.y-b.x,0.0)-q:q, 0.0 );
    float l = length(o);
    vec3  r = (h&lt;0.0 && -q.x&lt;l)?vec3(-q.x,1.0,0.0):vec3(l,o/l);
    return vec3( sign(h)*r.x, s*((p.y>p.x)?r.zy:r.yz) );
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx04.png"></div>
<div class="part2"><b>Hexagon</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WtySRc">https://www.shadertoy.com/view/WtySRc</a>)<br><br>
<div class="code"<span class="code">vec3 sdgHexagon( in vec2 p, in float r ) 
{
    const vec3 k = vec3(-0.866025404,0.5,0.577350269);
    vec2 s = sign(p); p = abs(p);
    float w = dot(k.xy,p);    
    p -= 2.0*min(w,0.0)*k.xy;
    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
    float d = length(p)*sign(p.y);
    vec2  g = (w&lt;0.0) ? mat2(-k.y,-k.x,-k.x,k.y)*p : p;
    return vec3( d, s*g/d );
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx05.png"></div>
<div class="part2"><b>Isosceles Triangle</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/3dyfDd">https://www.shadertoy.com/view/3dyfDd</a>)<br><br>
<div class="code"<span class="code">vec3 sdgTriangleIsosceles( in vec2 p, in vec2 q )
{
    float w = sign(p.x);
    p.x = abs(p.x);
    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
    float k = sign(q.y);
    float l1 = dot(a,a);
    float l2 = dot(b,b);
    float d = sqrt((l1&lt;l2)?l1:l2);
    vec2  g =      (l1&lt;l2)? a: b;
    float s = max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  );
    return vec3(d,vec2(w*g.x,g.y)/d)*sign(s);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx06.png"></div>
<div class="part2"><b>Triangle</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/tlVyWh">https://www.shadertoy.com/view/tlVyWh</a>)<br><br>
<div class="code"<span class="code">float cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }
vec3 sdgTriangle( in vec2 p, in vec2 v[3] )
{
    float gs = cro(v[0]-v[2],v[1]-v[0]);
    vec4 res;
    
    {
    vec2  e = v[1]-v[0], w = p-v[0];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4(d,q,s);
    } {
    vec2  e = v[2]-v[1], w = p-v[1];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4( (d&lt;res.x) ? vec3(d,q) : res.xyz,
                (s&gt;res.w) ?      s    : res.w );
    } {
    vec2  e = v[0]-v[2], w = p-v[2];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4( (d&lt;res.x) ? vec3(d,q) : res.xyz,
                (s&gt;res.w) ?      s    : res.w );
    }
    
    float d = sqrt(res.x)*sign(res.w);
    return vec3(d,res.yz/d);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx07.png"></div>
<div class="part2"><b>Quad</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/WtVcD1">https://www.shadertoy.com/view/WtVcD1</a>)<br><br>
<div class="code"<span class="code">float cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }
vec3 sdgQuad( in vec2 p, in vec2 v[4] )
{
    float gs = cro(v[0]-v[3],v[1]-v[0]);
    vec4 res;
    
    {
    vec2  e = v[1]-v[0], w = p-v[0];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4(d,q,s);
    } {
    vec2  e = v[2]-v[1], w = p-v[1];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4( (d&lt;res.x) ? vec3(d,q) : res.xyz,
                (s&gt;res.w) ?      s    : res.w );
    } {
    vec2  e = v[3]-v[2], w = p-v[2];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4( (d&lt;res.x) ? vec3(d,q) : res.xyz,
                (s&gt;res.w) ?      s    : res.w );
    } {
    vec2  e = v[0]-v[3], w = p-v[3];
    vec2  q = w-e*clamp(dot(w,e)/dot(e,e),0.0,1.0);
    float d = dot(q,q), s = gs*cro(w,e);
    res = vec4( (d&lt;res.x) ? vec3(d,q) : res.xyz,
                (s&gt;res.w) ?      s    : res.w );
    }    
    
    float d = sqrt(res.x)*sign(res.w);
    return vec3(d,res.yz/d);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<div class="partsL">
<div class="part1"><img src="gfx12.png"></div>
<div class="part2"><b>Ellipse</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/3lcfR8">https://www.shadertoy.com/view/3lcfR8</a>)<br><br>
<div class="code"<span class="code">vec3 sdgEllipse( vec2 p, in vec2 ab )
{
    vec2 sp = sign(p); p = abs( p );
    
    bool s = dot(p/ab,p/ab)>1.0;
    float w = atan(p.y*ab.x, p.x*ab.y);
    if(!s) w=(ab.x*(p.x-ab.x)&lt;ab.y*(p.y-ab.y))? 1.570796327 : 0.0;
    
    for( int i=0; i&lt;4; i++ )
    {
        vec2 cs = vec2(cos(w),sin(w));
        vec2 u = ab*vec2( cs.x,cs.y);
        vec2 v = ab*vec2(-cs.y,cs.x);
        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));
    }
    vec2  q = ab*vec2(cos(w),sin(w));

    float d = length(p-q);
    return vec3( d, sp*(p-q)/d ) * (s?1.0:-1.0);
}</div></div></div>
<!-- ------------------------------------------------------------ -->
<!-- ------------------------------------------------------------ -->
<br>
<br>
<h3>Operators/modifiers</h3><hr>
<br>
As said, once the gradients of the basic primitives are hardcoded, automatic differentiation can take over for most of the remaining composition work. However, if you really want to make it all crystal clear and remove all opaque aspects of your code, you might want to implement analytic gradient computation for the composition operators too. Here go a few:
<!-- ------------------------------------------------------------ -->
<br>
<br>
<br>
<b>Rounding</b><hr>
<br>
As we know, inflating any shape into a rounded self <a class="regular" href="https://www.youtube.com/watch?v=s5NGeUV2EyU">is pretty easy</a> with the single subtraction of a quantity <b>r</b>. If such <b>r</b> is a constant, the derivatives of the SDF won't change, so we don't really need to do anything in order to continue getting correct gradients.<br>
<br>
<div class="code">vec3 sdgRound( in vec2 p, in float r )
{
    vec3 dis_gra = sdgShape(p);
    return vec3( dis_gra.x - r, dis_gra.yz );
}</div>
<br>
These are a few examples:<br>
<br>
<img src="gfx20.png"/>
<img src="gfx21.png"/>
<img src="gfx22.png"/>
<img src="gfx23.png"/>
<!-- ------------------------------------------------------------ -->
<br>
<br>
<br>
<b>Onion - annular shapes</b><hr>
<br>
Similarly, shapes can be made annular (like a ring or the layers of an onion) by taking their absolute value and then subtracting a constant from their field. This operation is also very easy to carry over for the gradients:<br>
<br>
<div class="code">vec3 sdgOnion( in vec2 p, in float r )
{
    vec3 dis_gra = sdgShape(p);
    return vec3( abs(dis_gra.x) - r, sign(dis_gra.x)*dis_gra.yz );
}</div>
<br>
These are a few examples:<br>
<br>
<img src="gfx30.png"/>
<img src="gfx31.png"/>
<img src="gfx32.png"/>
<img src="gfx33.png"/>
<!-- ------------------------------------------------------------ -->
<br>
<br>
<br>
<b>Minimum and Smooth Minimum</b> &nbsp (<a class="regular" href="https://www.shadertoy.com/view/tdGBDt">https://www.shadertoy.com/view/tdGBDt</a>)<hr>
<br>
One way to combine shapes is to take the minimum of two SDFs. Naturally, the same conditional branching that picks the smallest of the SDFs should be used to select and propagate the gradient. However, when a <a class="regular" href="https://iquilezles.org/www/articles/smin/smin.htm">smooth minimum</a> is used to smoothly connect shapes, the derivative selection is more involved. Luckily, using polynomial smooth-minimums have simple derivatives and accept an analytical propagation. Of course, bear in mind that the smooth-minimum does <b>not</b> respect the constraints of having unit length everywhere, so its output is only a true SDF (or almost) far away from the surface of the resulting shape. Anyways, here's the code for the analytic derivatives/gradient of a quadratic smooth-minimum. <br>
<br>

<div class="code">vec3 sdgMin( in vec3 a, in vec3 b )
{
    return (a.x&lt;b.x)?a:b;
}</div>

<br>
<div class="code">vec3 sdgSmoothMin( in vec3 a, in vec3 b, in float k )
{
    float h = max(k-abs(a.x-b.x),0.0);
    float m = 0.25*h*h/k;
    float n = 0.50*  h/k;
    return vec3( min(a.x,  b.x) - m, 
                 mix(a.yz, b.yz, (a.x&lt;b.x)?n:1.0-n) );
}</div>
<br>
Here's on the left the minimum, and on the right the smooth-minimum:<br>
<br>
<img src="gfx40.png"/>
<img src="gfx41.png"/>
<!-- ------------------------------------------------------------ -->

<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>
