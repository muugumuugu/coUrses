        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/distfunctions2d/distfunctions2d.htm">2D distance functions</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<!-- --------------------------------------------------------------------------------- -->

<style>
.parts{ display:flex; }
.part1 { padding-right:64px; padding-bottom:48px;}
.part2 { padding-right:0px;  padding-bottom:48px;}
@media only screen and (max-width: 1280px)
{
  .parts { flex-direction:column;}
  .part1 { padding-right:0px;  padding-bottom:0px; width:100%; }
  .part2 { width:100%; }
}
</style>

<!---------------------------------------------------------------------------->

<h3>Intro</h3><hr>
The <a href="../distfunctions/distfunctions.htm">3D SDF functions article</a> is pretty popular, so I decided to write a similar one for 2D primitives, since most of the 3D primitives are grown as extrusions or revolutions of these 2D shapes. So getting these right is improtant. In particular, the functions bellow use the minimum number of square roots and divisions possible, and also produce better/faster results than constructing them from other primitives (when possible).<br>
<br>
Note that all the primitives listed here come with a link to a realtime online demo in Shadertoy. In fact, this public playlist contains all the shadertoy examples: <a href="https://www.shadertoy.com/playlist/MXdSRf">https://www.shadertoy.com/playlist/MXdSRf</a>, so don't miss that out.<br>
<br>
Lastly, as with all in this website, all formulas and code are derived by myself (unless otherwise stated), so there might be errors or better ways to do things. Let me know if you think that's the case.
<br>
<br>
<h3>Primitives</h3><hr>
All primitives are centered at the origin; you will have to transform the point to get arbitrarily rotated, translated and scaled objects (see below). The dot2(v) function returns the dot product of a vector with itself (or the square of its length).<br>
<br>
<br>

<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx00.png"></div>
<div class="part2"><b>Circle - exact</b> &nbsp (<a href="https://www.shadertoy.com/view/3ltSW2">https://www.shadertoy.com/view/3ltSW2</a>)<br><br>
<div class="code">float sdCircle( vec2 p, float r )
{
    return length(p) - r;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx34.png"></div>
<div class="part2"><b>Rounded Box - exact</b> &nbsp (<a href="https://www.shadertoy.com/view/4llXD7">https://www.shadertoy.com/view/4llXD7</a> and <a href="https://www.youtube.com/watch?v=s5NGeUV2EyU">https://www.youtube.com/watch?v=s5NGeUV2EyU</a>)<br><br>
<div class="code">float sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )
{
    r.xy = (p.x>0.0)?r.xy : r.zw;
    r.x  = (p.y>0.0)?r.x  : r.y;
    vec2 q = abs(p)-b+r.x;
    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx02.png"></div>
<div class="part2"><b>Box - exact</b> &nbsp (<a href="https://www.youtube.com/watch?v=62-pRVZuS5c">https://www.youtube.com/watch?v=62-pRVZuS5c</a>)<br><br>
<div class="code">float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx36.png"></div>
<div class="part2"><b>Oriented Box - exact</b><br><br>
<div class="code">float sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )
{
    float l = length(b-a);
    vec2  d = (b-a)/l;
    vec2  q = (p-(a+b)*0.5);
          q = mat2(d.x,-d.y,d.y,d.x)*q;
          q = abs(q)-vec2(l,th)*0.5;
    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx03.png"></div>
<div class="part2"><b>Segment - exact</b> &nbsp (<a href="https://www.shadertoy.com/view/3tdSDj">https://www.shadertoy.com/view/3tdSDj</a> and <a href="https://www.youtube.com/watch?v=PMltMdi1Wzg">https://www.youtube.com/watch?v=PMltMdi1Wzg</a>)<br><br>
<div class="code">float sdSegment( in vec2 p, in vec2 a, in vec2 b )
{
    vec2 pa = p-a, ba = b-a;
    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
    return length( pa - ba*h );
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- --><div class="partsL">
<div class="part1"><img src="gfx09.png"></div>
<div class="part2"><b>Rhombus - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/XdXcRB">https://www.shadertoy.com/view/XdXcRB</a>)<br><br>
<div class="code">float sdRhombus( in vec2 p, in vec2 b ) 
{
    vec2 q = abs(p);
    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);
    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );
    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx11.png"></div>
<div class="part2"><b>Isosceles Trapezoid - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/MlycD3">https://www.shadertoy.com/view/MlycD3</a>)<br><br>
<div class="code">float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
{
    vec2 k1 = vec2(r2,he);
    vec2 k2 = vec2(r2-r1,2.0*he);
    p.x = abs(p.x);
    vec2 ca = vec2(p.x-min(p.x,(p.y&lt;0.0)?r1:r2), abs(p.y)-he);
    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );
    float s = (cb.x&lt;0.0 && ca.y&lt;0.0) ? -1.0 : 1.0;
    return s*sqrt( min(dot2(ca),dot2(cb)) );
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx37.png"></div>
<div class="part2"><b>Parallelogram - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/7dlGRf">https://www.shadertoy.com/view/7dlGRf</a>)<br><br>
<div class="code">float sdParallelogram( in vec2 p, float wi, float he, float sk )
{
    vec2 e = vec2(sk,he);
    p = (p.y<0.0)?-p:p;
    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
    vec2  d = vec2(dot(w,w), -w.y);
    float s = p.x*e.y - p.y*e.x;
    p = (s<0.0)?-p:p;
    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
    d = min( d, vec2(dot(v,v), wi*he-abs(s)));
    return sqrt(d.x)*sign(-d.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx04.png"></div>
<div class="part2"><b>Equilateral Triangle - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/Xl2yDW">https://www.shadertoy.com/view/Xl2yDW</a>)<br><br>
<div class="code">float sdEquilateralTriangle( in vec2 p )
{
    const float k = sqrt(3.0);
    p.x = abs(p.x) - 1.0;
    p.y = p.y + 1.0/k;
    if( p.x+k*p.y&gt;0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;
    p.x -= clamp( p.x, -2.0, 0.0 );
    return -length(p)*sign(p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx10.png"></div>
<div class="part2"><b>Isosceles Triangle - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/MldcD7">https://www.shadertoy.com/view/MldcD7</a>)<br><br>
<div class="code">float sdTriangleIsosceles( in vec2 p, in vec2 q )
{
    p.x = abs(p.x);
    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );
    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );
    float s = -sign( q.y );
    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),
                  vec2( dot(b,b), s*(p.y-q.y)  ));
    return -sqrt(d.x)*sign(d.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx07.png"></div>
<div class="part2"><b>Triangle - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/XsXSz4">https://www.shadertoy.com/view/XsXSz4</a>)<br><br>
<div class="code">float sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )
{
    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;
    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;
    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );
    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );
    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );
    float s = sign( e0.x*e2.y - e0.y*e2.x );
    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),
                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),
                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));
    return -sqrt(d.x)*sign(d.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx12.png"></div>
<div class="part2"><b>Uneven Capsule - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/4lcBWn">https://www.shadertoy.com/view/4lcBWn</a>)<br><br>
<div class="code">float sdUnevenCapsule( vec2 p, float r1, float r2, float h )
{
    p.x = abs(p.x);
    float b = (r1-r2)/h;
    float a = sqrt(1.0-b*b);
    float k = dot(p,vec2(-b,a));
    if( k &lt; 0.0 ) return length(p) - r1;
    if( k &gt; a*h ) return length(p-vec2(0.0,h)) - r2;
    return dot(p, vec2(a,b) ) - r1;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx05.png"></div>
<div class="part2"><b>Regular Pentagon - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/llVyWW">https://www.shadertoy.com/view/llVyWW</a>)<br><br>
<div class="code">float sdPentagon( in vec2 p, in float r )
{
    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);
    p.x = abs(p.x);
    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);
    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);
    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    
    return length(p)*sign(p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx18.png"></div>
<div class="part2"><b>Regular Hexagon - exact</b><br><br>
<div class="code">float sdHexagon( in vec2 p, in float r )
{
    const vec3 k = vec3(-0.866025404,0.5,0.577350269);
    p = abs(p);
    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
    return length(p)*sign(p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx15.png"></div>
<div class="part2"><b>Regular Octogon - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/llGfDG">https://www.shadertoy.com/view/llGfDG</a>)<br><br>
<div class="code">float sdOctogon( in vec2 p, in float r )
{
    const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623 );
    p = abs(p);
    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);
    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);
    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
    return length(p)*sign(p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx17.png"></div>
<div class="part2"><b>Hexagram - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/tt23RR">https://www.shadertoy.com/view/tt23RR</a>)<br><br>
<div class="code">float sdHexagram( in vec2 p, in float r )
{
    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);
    p = abs(p);
    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;
    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);
    return length(p)*sign(p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx19.png"></div>
<div class="part2"><b>Star 5 - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3tSGDy">https://www.shadertoy.com/view/3tSGDy</a>)<br><br>
<div class="code">float sdStar5(in vec2 p, in float r, in float rf)
{
    const vec2 k1 = vec2(0.809016994375, -0.587785252292);
    const vec2 k2 = vec2(-k1.x,k1.y);
    p.x = abs(p.x);
    p -= 2.0*max(dot(k1,p),0.0)*k1;
    p -= 2.0*max(dot(k2,p),0.0)*k2;
    p.x = abs(p.x);
    p.y -= r;
    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);
    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );
    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);
}</div></div></div>

<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx28.png"></div>
<div class="part2"><b>Regular Star - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3tSGDy">https://www.shadertoy.com/view/3tSGDy</a>)<br><br>
<div class="code">float sdStar(in vec2 p, in float r, in int n, in float m)
{
    <span class="codeComment">// next 4 lines can be precomputed for a given shape</span>
    float an = 3.141593/float(n);
    float en = 3.141593/m;  <span class="codeComment">// m is between 2 and n</span>
    vec2  acs = vec2(cos(an),sin(an));
    vec2  ecs = vec2(cos(en),sin(en)); <span class="codeComment">// ecs=vec2(0,1) for regular polygon</span>

    float bn = mod(atan(p.x,p.y),2.0*an) - an;
    p = length(p)*vec2(cos(bn),abs(sin(bn)));
    p -= r*acs;
    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);
    return length(p)*sign(p.x);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx24.png"></div>
<div class="part2"><b>Pie - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3l23RK">https://www.shadertoy.com/view/3l23RK</a>)<br><br>
<div class="code">float sdPie( in vec2 p, in vec2 c, in float r )
{
    p.x = abs(p.x);
    float l = length(p) - r;
    float m = length(p-c*clamp(dot(p,c),0.0,r)); <span class="codeComment">// c=sin/cos of aperture</span>
    return max(l,m*sign(c.y*p.x-c.x*p.y));
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx25.png"></div>
<div class="part2"><b>Arc - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/wl23RK">https://www.shadertoy.com/view/wl23RK</a>)<br><br>
<div class="code">float sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, float rb )
{
    p *= mat2(sca.x,sca.y,-sca.y,sca.x);
    p.x = abs(p.x);
    float k = (scb.y*p.x&gt;scb.x*p.y) ? dot(p,scb) : length(p);
    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx26.png"></div>
<div class="part2"><b>Horseshoe - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/WlSGW1">https://www.shadertoy.com/view/WlSGW1</a>)<br><br>
<div class="code">float sdHorseshoe( in vec2 p, in vec2 c, in float r, in vec2 w )
{
    p.x = abs(p.x);
    float l = length(p);
    p = mat2(-c.x, c.y, c.y, c.x)*p;
    p = vec2((p.y&gt;0.0 || p.x&gt;0.0)?p.x:l*sign(-c.x),
             (p.x&gt;0.0)?p.y:l );
    p = vec2(p.x,abs(p.y-r))-w;
    return length(max(p,0.0)) + min(0.0,max(p.x,p.y));
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx13.png"></div>
<div class="part2"><b>Vesica - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/XtVfRW">https://www.shadertoy.com/view/XtVfRW</a>)<br><br>
<div class="code">float sdVesica(vec2 p, float r, float d)
{
    p = abs(p);
    float b = sqrt(r*r-d*d);
    return ((p.y-b)*d&gt;p.x*b) ? length(p-vec2(0.0,b))
                             : length(p-vec2(-d,0.0))-r;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx39.png"></div>
<div class="part2"><b>Moon - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/WtdBRS">https://www.shadertoy.com/view/WtdBRS</a>)<br><br>
<div class="code">float sdMoon(vec2 p, float d, float ra, float rb )
{
    p.y = abs(p.y);
    float a = (ra*ra - rb*rb + d*d)/(2.0*d);
    float b = sqrt(max(ra*ra-a*a,0.0));
    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )
          return length(p-vec2(a,b));
    return max( (length(p          )-ra),
               -(length(p-vec2(d,0))-rb));
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx41.png"></div>
<div class="part2"><b>Circle Cross - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/NslXDM">https://www.shadertoy.com/view/NslXDM</a>)<br><br>
<div class="code">float sdRoundedCross( in vec2 p, in float h )
{
    float k = 0.5*(h+1.0/h); <span class="codeComment">// k should be const at modeling time</span>
    p = abs(p);
    return ( p.x&lt;1.0 && p.y&lt;p.x*(k-h)+h ) ? 
             k-sqrt(dot2(p-vec2(1,k)))  :
           sqrt(min(dot2(p-vec2(0,h)),
                    dot2(p-vec2(1,0))));
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx29.png"></div>
<div class="part2"><b>Simple Egg - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/Wdjfz3">https://www.shadertoy.com/view/XtVfRW</a>)<br><br>
<div class="code">float sdEgg( in vec2 p, in float ra, in float rb )
{
    const float k = sqrt(3.0);
    p.x = abs(p.x);
    float r = ra - rb;
    return ((p.y&lt;0.0)       ? length(vec2(p.x,  p.y    )) - r :
            (k*(p.x+r)&lt;p.y) ? length(vec2(p.x,  p.y-k*r)) :
                              length(vec2(p.x+r,p.y    )) - 2.0*r) - rb;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx38.png"></div>
<div class="part2"><b>Heart - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3tyBzV">https://www.shadertoy.com/view/3tyBzV</a>)<br><br>
<div class="code">float sdHeart( in vec2 p )
{
    p.x = abs(p.x);

    if( p.y+p.x>1.0 )
        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;
    return sqrt(min(dot2(p-vec2(0.00,1.00)),
                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx14.png"></div>
<div class="part2"><b>Cross - exact exterior, bound interior</b> &nbsp; (<a href="https://www.shadertoy.com/view/XtGfzw">https://www.shadertoy.com/view/XtGfzw</a>)<br><br>
<div class="code">float sdCross( in vec2 p, in vec2 b, float r ) 
{
    p = abs(p); p = (p.y&gt;p.x) ? p.yx : p.xy;
    vec2  q = p - b;
    float k = max(q.y,q.x);
    vec2  w = (k&gt;0.0) ? q : vec2(b.y-p.x,-k);
    return sign(k)*length(max(w,0.0)) + r;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx27.png"></div>
<div class="part2"><b>Rounded X - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3dKSDc">https://www.shadertoy.com/view/3dKSDc</a>)<br><br>
<div class="code">float sdRoundedX( in vec2 p, in float w, in float r )
{
    p = abs(p);
    return length(p-min(p.x+p.y,w)*0.5) - r;
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx16.png"></div>
<div class="part2"><b>Polygon - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/wdBXRW">https://www.shadertoy.com/view/wdBXRW</a>)<br><br>
<div class="code">float sdPolygon( in vec2[N] v, in vec2 p )
{
    float d = dot(p-v[0],p-v[0]);
    float s = 1.0;
    for( int i=0, j=N-1; i&lt;N; j=i, i++ )
    {
        vec2 e = v[j] - v[i];
        vec2 w =    p - v[i];
        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );
        d = min( d, dot(b,b) );
        bvec3 c = bvec3(p.y>=v[i].y,p.y&lt;v[j].y,e.x*w.y>e.y*w.x);
        if( all(c) || all(not(c)) ) s*=-1.0;  
    }
    return s*sqrt(d);
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx06.png"></div>
<div class="part2"><b>Ellipse - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/4sS3zz">https://www.shadertoy.com/view/4sS3zz</a>)<br><br>
<div class="code">float sdEllipse( in vec2 p, in vec2 ab )
{
    p = abs(p); if( p.x &gt; p.y ) {p=p.yx;ab=ab.yx;}
    float l = ab.y*ab.y - ab.x*ab.x;
    float m = ab.x*p.x/l;      float m2 = m*m; 
    float n = ab.y*p.y/l;      float n2 = n*n; 
    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;
    float q = c3 + m2*n2*2.0;
    float d = c3 + m2*n2;
    float g = m + m*n2;
    float co;
    if( d&lt;0.0 )
    {
        float h = acos(q/c3)/3.0;
        float s = cos(h);
        float t = sin(h)*sqrt(3.0);
        float rx = sqrt( -c*(s + t + 2.0) + m2 );
        float ry = sqrt( -c*(s - t + 2.0) + m2 );
        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;
    }
    else
    {
        float h = 2.0*m*n*sqrt( d );
        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);
        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);
        float rx = -s - u - c*4.0 + 2.0*m2;
        float ry = (s - u)*sqrt(3.0);
        float rm = sqrt( rx*rx + ry*ry );
        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;
    }
    vec2 r = ab * vec2(co, sqrt(1.0-co*co));
    return length(r-p) * sign(p.y-r.y);
}</div></div></div>

<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx01.png"></div>
<div class="part2"><b>Parabola - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/ws3GD7">https://www.shadertoy.com/view/ws3GD7</a>)<br><br>
<div class="code">float sdParabola( in vec2 pos, in float k )
{
    pos.x = abs(pos.x);
    float ik = 1.0/k;
    float p = ik*(pos.y - 0.5*ik)/3.0;
    float q = 0.25*ik*ik*pos.x;
    float h = q*q - p*p*p;
    float r = sqrt(abs(h));
    float x = (h>0.0) ? 
        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
        2.0*cos(atan(r,q)/3.0)*sqrt(p);
    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);
}</div></div></div>

<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx35.png"></div>
<div class="part2"><b>Parabola Segment - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/3lSczz">https://www.shadertoy.com/view/3lSczz</a>)<br><br>
<div class="code">float sdParabola( in vec2 pos, in float wi, in float he )
{
    pos.x = abs(pos.x);
    float ik = wi*wi/he;
    float p = ik*(he-pos.y-0.5*ik)/3.0;
    float q = pos.x*ik*ik*0.25;
    float h = q*q - p*p*p;
    float r = sqrt(abs(h));
    float x = (h>0.0) ? 
        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
        2.0*cos(atan(r/q)/3.0)*sqrt(p);
    x = min(x,wi);
    return length(pos-vec2(x,he-x*x/ik)) * 
           sign(ik*(pos.y-he)+pos.x*pos.x);
}</div></div></div>

<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx08.png"></div>
<div class="part2"><b>Quadratic Bezier - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/MlKcDD">https://www.shadertoy.com/view/MlKcDD</a>)<br><br>
<div class="code">float sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )
{    
    vec2 a = B - A;
    vec2 b = A - 2.0*B + C;
    vec2 c = a * 2.0;
    vec2 d = A - pos;
    float kk = 1.0/dot(b,b);
    float kx = kk * dot(a,b);
    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
    float kz = kk * dot(d,a);      
    float res = 0.0;
    float p = ky - kx*kx;
    float p3 = p*p*p;
    float q = kx*(2.0*kx*kx-3.0*ky) + kz;
    float h = q*q + 4.0*p3;
    if( h &gt;= 0.0) 
    { 
        h = sqrt(h);
        vec2 x = (vec2(h,-h)-q)/2.0;
        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
        res = dot2(d + (c + b*t)*t);
    }
    else
    {
        float z = sqrt(-p);
        float v = acos( q/(p*z*2.0) ) / 3.0;
        float m = cos(v);
        float n = sin(v)*1.732050808;
        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);
        res = min( dot2(d+(c+b*t.x)*t.x),
                   dot2(d+(c+b*t.y)*t.y) );
        <span class="codeComment">// the third root cannot be the closest</span>
        // res = min(res,dot2(d+(c+b*t.z)*t.z));
    }
    return sqrt( res );
}</div></div></div>
<!-- -------------------------------------------------------------------------------------------- -->
<div class="partsL">
<div class="part1"><img src="gfx40.png"></div>
<div class="part2"><b>Bobbly Cross - exact</b> &nbsp; (<a href="https://www.shadertoy.com/view/NssXWM">https://www.shadertoy.com/view/NssXWM</a>)<br><br>
<div class="code">float sdBlobbyCross( in vec2 pos, float he )
{
    pos = abs(pos);
    pos = vec2(abs(pos.x-pos.y),1.0-pos.x-pos.y)/sqrt(2.0);

    float p = (he-pos.y-0.25/he)/(6.0*he);
    float q = pos.x/(he*he*16.0);
    float h = q*q - p*p*p;
    
    float x;
    if( h&gt;0.0 ) { float r = sqrt(h); x = pow(q+r,1.0/3.0)-pow(abs(q-r),1.0/3.0)*sign(r-q); }
    else        { float r = sqrt(p); x = 2.0*r*cos(acos(q/(p*r))/3.0); }
    x = min(x,sqrt(2.0)/2.0);
    
    vec2 z = vec2(x,he*(1.0-2.0*x*x)) - pos;
    return length(z) * sign(z.y);
}</div></div></div>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Making shapes rounded</h3><hr>
<br>
All the shapes above can be converted into rounded shapes by subtracting a constant from their distance function. That, effectivelly moves the isosurface (isopetimeter I guess) from the level zero to one of the outter rings, which naturally are rounded, as it can be seen in the yellow areas in all the images above. So, basically, for any shape defined by <b>d(x,y) = sdf(x,y)</b>, one can make it sounded by computing <b>d(x,y) = sdf(x,y) - r</b>. You can learn more about this in <a href="https://www.youtube.com/watch?v=s5NGeUV2EyU">this Youtube video</a>.<br>
<br>
<div class="code">float opRound( in vec2 p, in float r )
{
  return sdShape(p) - r;
}</div>
<br>
These are a few examples: rounded line, rounded triangle, rounded box and a rounded pentagon:<br>
<br>
<img src="gfx20.png"/>
<img src="gfx21.png"/>
<img src="gfx22.png"/>
<img src="gfx23.png"/>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Making shapes annular</h3><hr>
<br>
Similarly, shapes can be made annular (like a ring or the layers of an onion), but taking their absolute value and then substracting a constant from their field. So, for any shape defined by <b>d(x,y) = sdf(x,y)</b> compute <b>d(x,y) = |sdf(x,y)| - r</b>:<br>
<br>
<div class="code">float opOnion( in vec2 p, in float r )
{
  return abs(sdShape(p)) - r;
}</div>
<br>
These are a few examples: annular rounded line, an annular triangle, an annular box and a annular pentagon:<br>
<br>
<img src="gfx30.png"/>
<img src="gfx31.png"/>
<img src="gfx32.png"/>
<img src="gfx33.png"/>
<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Rigid deformations, domain repetition, range distortion, boolean operations, smooth connections, etc</h3><hr>
<br>
All of these work just as well as in 3D case, so I won't repeat the examples already exist in <a href="../distfunctions/distfunctions.htm">this article</a>.
<!-- -------------------------------------------------------------------------------------------- -->

<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>