        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/ssao/ssao.htm">screen space ambient occlusion - 2007</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">

<i><b>ssao</b></i> stands for <i><b>S</b></i>creen <i><b>S</b></i>pace <i><b>A</b></i>mbien<i> <b>O</b></i>cclusion, and it partially makes reality
one of the deepest dreams of computer graphics programmers: ambient occlusion in realtime, mine included (see <a class="regular" href="../ao/ao.htm">here</a>). The term was first used by Crytek (a german game company) when they introduced it in a small paragraph of a paper called "Finding Next Gen – CryEngine 2" (just google for that sentence).<br>
Since then many cg programing enthusiast tryed to decipher how the technique works, and each one got different results with varying quality and performances. I did my own investigations and I arrived to a method that being not optimal, still gives cool results and is quite usable. Of course I went thru many revisions of the algorithm, but well, this is the technique I used for <i>Kindernoiser</i> and <i>Kindercrasher</i> 4 kilobyte demos.
<br>
<br>
<br>
<br>
<br>
<center>
<img class="myPicture" src="julia00.jpg"/><br>
<i>Screen Space Ambient Occlusion term applied to a complex shape</i>
</center>

<br>

<br>
<br>
<h3>The trick:</h3><hr>
Ambient occlusion, as other direct lighting techniques (and indirect too of course) is based on a non-local computations. This means it's not enough to know the surface properties of the point to be shaded, but one needs some description of the surrounding geomtry as well. Since this information is not accessible on modern rasterization hardware (that's why we will never see good realtime shadows in OpenglGL or Directx), the Crytek team (as many other guy somehow before them) came with the idea to use the zbuffer to partially recover such information. Zbuffer can be seen as a small repository of geometry information: from each pixel on the buffer one can recover the 3d position of the geometry (well, the closest to the camera surface) projected on that pixel.<br>
<br>
Thus the idea is to use that information in a two (or more) pass algorith. First render the scene normally, or almost, and in a second full screen quad pass compute the ambient occlusion at each pixel and use it to modify the already computed lighting. For that, for each pixel for which we compute the AO we construct few 3d points around it and see if these points are occluded from camera's point of view. This is not ambient occlusion as in the usual definition, but it indeed gives some kind of concavity for the shaded point, what can be interpreted as an (ambient) occlusion factor.<br>
<br>
To simplify computations on the second pass, the first pass outputs a linear eye space z distance (instead of the 1/z used on the regular zbuffers). This is done per vertex since z, being linear, can be safely interpolated on the surface of the poyigons. By using multiple render targets one can output this buffer at the same time as the regular color buffer.<br>
<br>
The second pass draws a screen space polyon covering the complete viewport and performs the ambient occlusion computation. For that it first recovers the eye space position of each pixel by unprojection: it reads the z value from the previously prepared texture, and given the eye space view vector (computed by interpolation from the vertex shader) it computes the eye space position. Say <b><i>gl_TexCoord[0]</i></b> contains the eye view vector (not necessarily normalized), <b><i>tex0</i></b> the linear zbuffer, and <b><i>gl_Color</i></b> the 2d pixel coordinates (from 0 to 1 for the complete viewport), then:<br>
<br>
<div class="code">float ez = texture2D( tex0, gl_Color.xy );           // eye z distance
vec3  ep = ez*gl_TexCoord[0].xyz/gl_TexCoord[0].z;   // eye point</div>
<br>

next we have to generate N 3d points. I believe Crytek uses 8 points for low end machines (pixel shaders 2.0) and 16 for more powerfull machines. It's a trade off between speed and quality, so definitively a parameter to play with. I generated the points arround the current shading point in a sphere (inside the sphere, not just on the surface) from a small random lookup table (passed as constants), with a constant radius (scene dependant, and feature dependant - you can make the AO more local or global by adjusting this parameter). <br>
    
<div class="code">for( int i=0; i<32; i++ )
{
    vec3 se = ep + rad*fk3f[i].xyz;
</div>
<br>

Next we project these points back into clip space with the usual perspective division and look up on the zbuffer for the scene's eye z distane at that pixel, as in shadow mapping:<br>
<br>
<div class="code">    vec2 ss = (se.xy/se.z)*vec2(.75,1.0);
    vec2 sn = ss*.5 + vec2(.5);
    vec4 sz = texture2D(tex0,sn);
</div>
<br>
or alternatively<br>
<br>
<div class="code">    vec3 ss = se.xyz*vec3(.75,1.0,1.0);
    vec4 sz = texture2DProj( tex0, ss*.5+ss.z*vec3(.5) );
</div>
<br>

Now the most tricky part of the algorithm comes. Unlike in shadow mapping where a simple comparison yields a binary value, in this case we have to be more careful because we have to account for occlusion, and occlusion factor are distance dependant while shadows are not. For example, a surface element that is far from the point under consideration will occlude less that point than if it was closer, with a cuadratic attenuation (have a look <a class="regular" href="../sphereao/sphereao.htm" class=linkinet>here</a>). So this means it should be a bit like a step() curve so that for negative values it does not occlude, but it should then slowly attenuate back to zero also. The attenuation factor, again, depends on the scale of the 
scene and aesthetical factors. I call this function "blocking or occlusion function". The idea is then to accumulate the occlusion factor, like:<br>
<br>
<div class="code">    float zd = 50.0*max( se.z-sz.x, 0.0 );
    bl += 1.0/(1.0+zd*zd);              // occlusion = 1/( 1 + 2500*max{dist,0)^2 )
</div>
<br>
and to finish we just have to average to get the total estimated occlusion.<br>
<br>
<div class="code">    }
gl_FragColor = vec4(bl/32.0);</div>
<br>

<br>
<br>
<h3>The second trick:</h3><hr>
Doing it as just described creates some ugly banding artifacts derived from the low sampling rate of the occlusion (32 in the example above, 8 or 16 in Cryteks implementation). So the next step is to apply some dithering to the sampling pattern. Crytek suggests to use a per pixel random plane to do a reflection on the sampling point around the shading point, what works very well in practice and is very fast. For that we have to prepare a small random normal map, accessible thru <b><i>tex1</i></b> on the following modified code:<br>
<br>
<div class="code">vec3 se = ep + rad*reflect(fk3f[i].xyz,pl.xyz);
</div>
<br>
so the complete shader looks like:


<div class="code">
uniform vec4 fk3f[32];
uniform vec4 fres;
uniform sampler2D tex0;
uniform sampler2D tex1;

void main(void)
{
    vec4 zbu = texture2D( tex0, gl_Color.xy );

    vec3 ep = zbu.x*gl_TexCoord[0].xyz/gl_TexCoord[0].z;

    vec4 pl = texture2D( tex1, gl_Color.xy*fres.xy );
    pl = pl*2.0 - vec4(1.0);

    float bl = 0.0;
    for( int i=0; i<32; i++ )
    {
        vec3 se = ep + rad*reflect(fk3f[i].xyz,pl.xyz);

        vec2 ss = (se.xy/se.z)*vec2(.75,1.0);
        vec2 sn = ss*.5 + vec2(.5);
        vec4 sz = texture2D(tex0,sn);

        float zd = 50.0*max( se.z-sz.x, 0.0 );
        bl += 1.0/(1.0+zd*zd);
   }
   gl_FragColor = vec4(bl/32.0);
}
</div>
<br>
The big secret trick is to apply next a bluring to the ambient occlusion, that we stored in a texture (occlusion map). It's easy to avoid bluring across object edges by checking the difference in z between the blurring sampling points, and the eye space normal too (that we can output as with the eye linear z distance on the very first pass).<br>
<br>
<br>
<br>
<h3>Optimziations:</h3><hr>
The shader above does not execute in pixel shaders 2.0 hardware, because of the amount of instructions, even with just 8 sampling points, while Crytek's does. So, the thing is to simplify the inner loop code. The first this one can do is to remove the perspective projection applied to the sampling points. This has a nice side effect, and it's that the sampling sphere is constant size in screen space reagardless the distance to the camera, what allows for ambient occlusion both in close and distant objects at the same time. That's what Crytek guys do, I believe. Once could play with the blocking factor to remove few instructions too.
<br>
<br>
<h3>Results:</h3><hr>
I added few reference images below of this realtime <i><b>S</b></i>creen <i><b>S</b></i>pace <i><b>A</b></i>mbien<i> <b>O</b></i>cclusion 
implementation (the small one are clickable).
<br>
<br>
<center><img class="myPicture" src="julia01.jpg"/></center><br>
<br>

<div class="partsC">
<div class="part"><a href="julia02.htm"><img class="myPicture" src="julia02_peq.jpg"/></a></div>
<div class="part"><a href="julia03.htm"><img class="myPicture" src="julia03_peq.jpg"/></a></div>
</div>
<!-- -------------------------------------------------------------------------------------------- -->

<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>