        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/boxfunctions/boxfunctions.htm">box functions</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<h3>Intro</h3><hr>
<br>
A sphere are simple geometry shape described by a simple equation and therefore it accepts <a class="regular" href="../spherefunctions/spherefunctions.htm">analytic solutions</a> to many problems involving projections, occlusion, shadows, motion blur, etc. Similary, boxes are simple shapes that also accept closed form expresions for many such problems. This page collects some of those that I have collected (more often than not, derived myself).<br>
<br>
<br>

<br>
<h3>Functions</h3><hr>

<br>
<br>

Notes on helper functions:<br>
* maxcomp() computes the largest of the coordinates of a vector.<br>
* msign() for each component in a vector, returns -1 if it's negative or zero, and +1 otherwise
<br>

<!-- ------------------------------------- -->

<div class="partsB">
<div class="part">
<b>Box Distance</b><br>
<br>
<div class="code"><span class="codeComment">// Calcs signed distance to a box of semi-size "rad" centered at
// the origin. It works in 2D, 3D, 4D any number of dimensions by
// replacing the vec data types.</span>
float boxDistance( in vec3 p, in vec3 rad ) 
{
    vec2 d = abs(p)-rad;
    return length(max(d,0.0)) + min(maxcomp(d),0.0);
}

</div>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/4llXD7">Example / Code</a> and <a class="regular" href="https://www.youtube.com/watch?v=62-pRVZuS5c">Tutorial</a><br>
<img src="gfx01.jpg"/></div>
</div>

<!-- ------------------------------------- -->

<div class="partsB">
<div class="part">
<b>Box Gradient / Normal</b><br>
<br>
<div class="code"><span class="codeComment">// Calcs the gradient of the distance to a box. Works at
// any point in space, including the interior of the box.</span>
float boxGradient( in vec3 p, in vec3 rad ) 
{
    vec3  d = abs(p)-rad;
    vec3  s = msign(p);
    float g = maxcomp(d);
    return s*((g>0.0) ? normalize(max(d,0.0)) : 
                        step(d.yzx,d.xyz)*step(d.zxy,d.xyz));
}
</div>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/wlcXD2">Example / Code</a><br>
<img src="gfx01.jpg"/></div>
</div>


<!-- ------------------------------------- -->

<div class="partsB">
<div class="part">
<b>Box Intersection</b><br>
<br>
<div class="code"><span class="codeComment">// Calcs intersection and exit distances, and normal at intersection.
// The ray must be in box/object space. If you have multiple boxes all
// aligned to the same axis, you can precompute 1/rd. If you have
// multiple boxes but they are not alligned to each other, use the 
// "Generic" box intersector bellow this one.</span>
vec2 boxIntersection( in vec3 ro, in vec3 rd, in vec3 rad, out vec3 oN ) 
{
    vec3 m = 1.0/rd;
    vec3 n = m*ro;
    vec3 k = abs(m)*rad;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
	
    if( tN&gt;tF || tF&lt;0.0) return vec2(-1.0); // no intersection
    
    oN = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);

    return vec2( tN, tF );
}</div>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/ld23DV">Example / Code</a><br>
<img src="gfx01.jpg"/></div>

</div>
<!-- ------------------------------------- -->


<div class="partsB">
<div class="part">
<b>Box Intersection Generic</b><br>
<br>
<div class="code"><span class="codeComment">// Calcs intersection and exit distances, normal, face and UVs
// row is the ray origin in world space
// rdw is the ray direction in world space
// txx is the world-to-box transformation
// txi is the box-to-world transformation
// ro and rd are in world space
// rad is the half-length of the box
//
// oT contains the entry and exit points
// oN is the normal in world space
// oU contains the UVs at the intersection point
// oF contains the index if the intersected face [0..5]</span>
bool boxIntersect( in vec3 row, in vec3 rdw, in mat4 txx, in mat4 txi, in vec3 rad,
                   out vec2 oT, out vec3 oN, out vec2 oU, out int oF ) 
{				 
    <span class="codeComment">// convert from world to box space</span>
    vec3 rd = (txx*vec4(rdw,0.0)).xyz;
    vec3 ro = (txx*vec4(row,1.0)).xyz;


    <span class="codeComment">// ray-box intersection in box space</span>
    vec3 m = 1.0/rd;
    vec3 s = vec3((rd.x&lt;0.0)?1.0:-1.0,
                  (rd.y&lt;0.0)?1.0:-1.0,
                  (rd.z&lt;0.0)?1.0:-1.0);
    vec3 t1 = m*(-ro + s*rad);
    vec3 t2 = m*(-ro - s*rad);

    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
	
    if( tN&gt;tF || tF&lt;0.0) return false;

    <span class="codeComment">// compute normal (in world space), face and UV</span>
    if( t1.x&gt;t1.y && t1.x&gt;t1.z ) { oN=txi[0].xyz*s.x; oU=ro.yz+rd.yz*t1.x; oF=(1+int(s.x))/2;
    else if( t1.y&gt;t1.z   )       { oN=txi[1].xyz*s.y; oU=ro.zx+rd.zx*t1.y; oF=(5+int(s.y))/2;
    else                         { oN=txi[2].xyz*s.z; oU=ro.xy+rd.xy*t1.z; oF=(9+int(s.z))/2;

    oT = vec2(tN,tF);
    
    return true;
}</div>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/ld23DV">Example / Code</a><br>
<img src="gfx01.jpg"/></div>
</div>

<!-- ------------------------------------- -->

<div class="partsB">
<div class="part">
<b>Box Ambient Occlusion</b><br>
<br>
<div class="code">float boxOcclusion( in vec3 pos, in vec3 nor, 
                    in mat4 txx,  <span class="codeComment">// box rotation+position</span>
                    in vec3 rad ) <span class="codeComment">// box size</span>
{
    vec3 p = (txx*vec4(pos,1.0)).xyz;
    vec3 n = (txx*vec4(nor,0.0)).xyz;
    
    <span class="codeComment">// 8 verts</span>
    vec3 v0 = normalize( vec3(-1.0,-1.0,-1.0)*rad - p);
    vec3 v1 = normalize( vec3( 1.0,-1.0,-1.0)*rad - p);
    vec3 v2 = normalize( vec3(-1.0, 1.0,-1.0)*rad - p);
    vec3 v3 = normalize( vec3( 1.0, 1.0,-1.0)*rad - p);
    vec3 v4 = normalize( vec3(-1.0,-1.0, 1.0)*rad - p);
    vec3 v5 = normalize( vec3( 1.0,-1.0, 1.0)*rad - p);
    vec3 v6 = normalize( vec3(-1.0, 1.0, 1.0)*rad - p);
    vec3 v7 = normalize( vec3( 1.0, 1.0, 1.0)*rad - p);
    
    <span class="codeComment">// 12 edges</span>
    float k02 = dot(n,normalize(cross(v2,v0)))*acos(dot(v0,v2));
    float k23 = dot(n,normalize(cross(v3,v2)))*acos(dot(v2,v3));
    float k31 = dot(n,normalize(cross(v1,v3)))*acos(dot(v3,v1));
    float k10 = dot(n,normalize(cross(v0,v1)))*acos(dot(v1,v0));
    float k45 = dot(n,normalize(cross(v5,v4)))*acos(dot(v4,v5));
    float k57 = dot(n,normalize(cross(v7,v5)))*acos(dot(v5,v7));
    float k76 = dot(n,normalize(cross(v6,v7)))*acos(dot(v7,v6));
    float k37 = dot(n,normalize(cross(v7,v3)))*acos(dot(v3,v7));
    float k64 = dot(n,normalize(cross(v4,v6)))*acos(dot(v6,v4));
    float k51 = dot(n,normalize(cross(v1,v5)))*acos(dot(v5,v1));
    float k04 = dot(n,normalize(cross(v4,v0)))*acos(dot(v0,v4));
    float k62 = dot(n,normalize(cross(v2,v6)))*acos(dot(v6,v2));
    
    <span class="codeComment">// 6 faces</span>    
    float occ = 0.0;
    occ += ( k02 + k23 + k31 + k10) * step( 0.0,  v0.z );
    occ += ( k45 + k57 + k76 + k64) * step( 0.0, -v4.z );
    occ += ( k51 - k31 + k37 - k57) * step( 0.0, -v5.x );
    occ += ( k04 - k64 + k62 - k02) * step( 0.0,  v0.x );
    occ += (-k76 - k37 - k23 - k62) * step( 0.0, -v6.y );
    occ += (-k10 - k51 - k45 - k04) * step( 0.0,  v0.y );
        
    return occ / 6.283185;
}</div>
<br>
This code will work only when the box is fully visible from the shading point.<br>For boxes that are partially below the visibility horizon, use this code that does<br>clipping in the polygons instead: <a class="regular" href="https://www.shadertoy.com/view/4sSXDV">https://www.shadertoy.com/view/4sSXDV</a>
</div>

<div class="part">
<a class="regular" href="../boxocclusion/boxocclusion.htm">Maths / Article</a><br>
<a class="regular" href="https://www.shadertoy.com/view/4djXDy">Example / Code</a><br>
<img src="gfx00.jpg"/></div>

</div>

<!-- ------------------------------------- -->

<div class="partsB">
<div class="part">
<b>Box Soft Shadows</b><br>
<br>
<div class="code">float boxSoftShadow( in vec3 row, in vec3 rdw,
                     in mat4 txx,   <span class="codeComment">// box rotation+position</span>
                     in vec3 rad,   <span class="codeComment">// box semi-size</span>
                     in float sk )  <span class="codeComment">// shadow softness (try 8.0)</span>
{
    vec3 rd = (txx*vec4(rdw,0.0)).xyz;
    vec3 ro = (txx*vec4(row,1.0)).xyz;

    vec3 m = 1.0/rd;
    vec3 n = m*ro;
    vec3 k = abs(m)*rad;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
	
    if( tN&gt;tF || tF&lt;0.0)
    {
        float sh = 1.0;
        sh = segShadow( ro.xyz, rd.xyz, rad.xyz, sh );
        sh = segShadow( ro.yzx, rd.yzx, rad.yzx, sh );
        sh = segShadow( ro.zxy, rd.zxy, rad.zxy, sh );
        sh = clamp(sk*sqrt(sh),0.0,1.0);
        return sh*sh*(3.0-2.0*sh);
    }
    return 0.0;
}

float length2( in vec3 v ) { return dot(v,v); }
float segShadow( in vec3 ro, in vec3 rd, in vec3 pa, float sh )
{
    float k1 = 1.0 - rd.x*rd.x; // k = dot(rd.yz,rd.yz);
    float k4 = (ro.x-pa.x)*k1;
    float k6 = (ro.x+pa.x)*k1;
    vec2  k5 = ro.yz*k1;
    vec2  k7 = pa.yz*k1;
    float k2 = -dot(ro.yz,rd.yz);
    vec2  k3 = pa.yz*rd.yz;
    
    for( int i=0; i&lt;4; i++ )
    {
        vec2 ss = vec2( i & 1, i >> 1)*2.0-1.0;
        float thx = k2 + dot(ss,k3);
        if( thx&lt;0.0 ) continue; // behind
        float thy = clamp( -rd.x*thx, k4, k6 );
        sh = min( sh, length2( vec3(thy,k5-k7*ss) + rd*thx )/(thx*thx) );
    }
    return sh;
}</div>
<br>
This function will produce super fast soft shadows that, while not accurate, are plausible.<br>
The shadows will be sharper near the box and soften further away. You can control the<br>
 softness of the shadow swith the parameter <b>sk</b>: <a class="regular" href="https://www.shadertoy.com/view/4sSXDV">https://www.shadertoy.com/view/4sSXDV</a>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/4sSXDV">Example / Code</a><br>
<img src="gfx03.png"/></div>

</div>

<!-- ------------------- -->

<div class="partsB">
<div class="part">
<b>Box Density</b><br>
<br>
<div class="code">float boxDensity( vec3 wro, vec3 wrd,       <span class="codeComment">// ray origin and direction</span>
                  mat4 txx, vec3 rad, <span class="codeComment">// box rot+pos, and size</span>
                  float dbuffer )
{
    vec3 d = (txx*vec4(wrd,0.0)).xyz;
    vec3 o = (txx*vec4(wro,1.0)).xyz;

    <span class="codeComment">// ray-box intersection in box space</span>
    vec3 m = 1.0/d;
    vec3 n = m*o;
    vec3 k = abs(m)*rad;
    vec3 ta = -n - k;
    vec3 tb = -n + k;
    float tN = max( max( ta.x, ta.y ), ta.z );
    float tF = min( min( tb.x, tb.y ), tb.z );
    if( tN&gt;tF || tF&lt;0.0) return 0.0;

    <span class="codeComment">// not visible (behind camera or behind dbuffer)</span>
    if( tF&lt;0.0 || tN&gt;dbuffer ) return 0.0;

    <span class="codeComment">// clip integration segment from camera to dbuffer</span>
    tN = max( tN, 0.0 );
    tF = min( tF, dbuffer );
    
    <span class="codeComment">// move ray to the intersection point</span>
    o += tN*d; tF=tF-tN; tN=0.0;

    <span class="codeComment">// density d(x,y,z) = [1-(x/rx)^2]*[1-(y/ry)^2]*[1-(z/rz)^2]
    // is analytically integrable:</span>
    
    float ir2 = 1.0/(rad*rad);
    vec3 a = 1.0 -     (o*o)*ir2;
    vec3 b =     - 2.0*(o*d)*ir2;
    vec3 c =     -     (d*d)*ir2;
    
    float t1 = tF;
    float t2 = t1*t1;
    float t3 = t2*t1;
    float t4 = t2*t2;
    float t5 = t2*t3;
    float t6 = t3*t3;
    float t7 = t3*t4;

    return (t1/1.0)*(a.x*a.y*a.z) + 
           (t2/2.0)*(a.x*a.y*b.z + a.x*b.y*a.z + b.x*a.y*a.z) + 
           (t3/3.0)*(a.x*a.y*c.z + a.x*b.y*b.z + a.x*c.y*a.z + 
                     b.x*a.y*b.z + b.x*b.y*a.z + c.x*a.y*a.z) +
           (t4/4.0)*(a.x*b.y*c.z + a.x*c.y*b.z + b.x*a.y*c.z + 
                     b.x*b.y*b.z + b.x*c.y*a.z + c.x*a.y*b.z + 
                     c.x*b.y*a.z) + 
           (t5/5.0)*(a.x*c.y*c.z + b.x*b.y*c.z + b.x*c.y*b.z + 
                     c.x*a.y*c.z + c.x*b.y*b.z + c.x*c.y*a.z) + 
           (t6/6.0)*(b.x*c.y*c.z + c.x*b.y*c.z + c.x*c.y*b.z) + 
           (t7/7.0)*(c.x*c.y*c.z);
}</div>
</div>

<div class="part">
<a class="regular" href="https://www.shadertoy.com/view/Ml3GR8">Example / Code</a><br>
<img src="gfx02.jpg"/></div>
</div>





	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>