        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/warp/warp.htm">domain warping - 2002</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">

<style>
.figureCentered
{
    margin:auto;
    text-align:center;
}
</style>


<h3>Intro</h3><hr>

Warping, or dommain distortion is a very common technique in computer graphics for generating procedural textures and geometry. It's often used to pinch an object, strech it, twist it, bend it, make it thicker or apply <a class="regular" href="../distfunctions/distfunctions.htm">any deformation you want</a>. It works as long as your base color pattern or geometry is defined as a function of space. In this article I'm only going to show a very particular case of warping - noise based warping or a noise function. This has been used since 1984, when Ken Perlin himself <a class="regular" href="http://www.noisemachine.com/talk1">created his first procedural marble texture</a>. <br>
<br>
<br>

<center>
<figure class="figureCentered">
<img class="myPicture" src="gfx00.jpg"/>
<figcaption>Image for f(p) = fbm(p+fbm(p+fbm(p))) &nbsp; - &nbsp; <a class="regular" href="https://www.redbubble.com/i/metal-print/Warping-1-by-InigoQuilez/45300039.0JXQP" target="_blank">order a metal print of this image</a></figcaption>
</figure>
</center>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>The basics</h3><hr>
 <br>
Say you have some geometry or image defined as a function of space. For geometry, that would be a function of the form <i>f(x,y,z)</i> and for an image it would be <i>f(x,y)</i>. We can just write both cases more compactly as <i>f(p)</i>, where <i>p</i> is the position in space for which we can evaluate the volumetric density that will define our (iso)surface or image color. Warping simply means we distort the domain with another function <i>g(p)</i> before we evaluate <i>f</i>. Basically, we replace f(p) with <i>f(g(p))</i>. <i>g</i> can be anything, but often we want to distort the image of <i>f</i> just a little bit with respect its regular behaviour. Then, it makes sense to have <i>g(p)</i> being just the identity plus a small arbitrary distortion <i>h(p)</i>, or in other words,<br>
<br>
<i>g(p) = p + h(p)</i><br>
<br>
meaning we will be computing<br>
<br>
<i>f( p + h(p) )</i><br>
<br>
This technique is really powerfull and allows you to shape apples, buildings, animals or any other thing you might imagine. For the purpose of this article, we are going to work only with fBM based patterns, both for <i>f</i> and <i>h</i>. This will produce some abstract but beautiful images with a pretty organic quality to them.<br>
<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<h3>The idea</h3><hr>
<br>
So we are going to use some standard fBM (<a class="regular" href="../fbm/fbm.htm">Fractional Brownian Motion</a>) which is a simple sum of noise waves with increasing frequencies and decreasing amplitudes).<br>
<br>
A simple fBM is displayed in the first image to the right. The code looks like this:<br>
<br>
<div class="code">float pattern( in vec2 p )
{
    return fbm( p );
}</div>
<br>
We can now add a first domain warping (second image to the right):<br>
<br>
<div class="code">float pattern( in vec2 p )
{
    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ),
                   fbm( p + vec2(5.2,1.3) ) );

    return fbm( p + 4.0*q );
}</div>
<br>
Note how we use two 1-dimensional fBM calls to emulate a 2-dimensional fBM, which is what we need in order to displace a point in 2 dimensions.<br>
<br>
Lastly, we add the second wraping (third image to the right):<br>
<br>
<div class="code">float pattern( in vec2 p )
{
    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ),
                   fbm( p + vec2(5.2,1.3) ) );

    vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7,9.2) ),
                   fbm( p + 4.0*q + vec2(8.3,2.8) ) );

    return fbm( p + 4.0*r );
}</div>
<br>
Of course those particular offset values in the 2-dimensional fBM emulation through 1-dimensional fbm() calls don't have any special meaning, they are used to get different fBM values by using one single fbm() implementaiton.<br>
<br>
<div class="partsC">
<div class="part"><img class="myPicture" src="gfx04.jpg"/><br><i>Image for f(p) = fbm( p )</i></div>
<div class="part"><img class="myPicture" src="gfx03.jpg"/><br><i>Image for f(p) = fbm( p + fbm( p ) )</i></div>
<div class="part"><img class="myPicture" src="gfx02.jpg"/><br><i>Image for f(p) = fbm( p + fbm( p + fbm( p )) )</i></div>
</div>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<h3>The experiments</h3><hr>
<br>
Now the basics are set, it's time to start playing around. First obvious idea is to introduce time as a parameter to get some sort of animation. That you can probably figure out by yourself. Results are pretty cool. Look in the following video (sorry for the low quality enconding, I made it in 2002), or to the last video in the bottom of this article.<br>
<br>
<center>
<video class="myPicture" muted loop controls disablepictureinpicture controlsList="nodownload nofullscreen noremoteplayback">
  <source src="vid00.mp4" type="video/mp4">
  <source src="vid00.webm" type="video/webm">
</video>
<br>
Animated fbm(fbm(p)) - made in 2002<br>
</center>


<br>
Next step is adding some colors to our images. We can simply map a color palette to our density values. That's a good start, but it's not enough. We might want to use the internal values of the funcion to get some extra color patterns and shapes. After all, we got three fBM functions that do change the internal structure of our final image, so why not use those too to get some extra coloring. The first we have to do, then, is to 

actually expose those values to the outside world:<br>

<div class="code">
float pattern( in vec2 p, out vec2 q, out vec2 r )
{
    q.x = fbm( p + vec2(0.0,0.0) );
    q.y = fbm( p + vec2(5.2,1.3) );

    r.x = fbm( p + 4.0*q + vec2(1.7,9.2) );
    r.y = fbm( p + 4.0*q + vec2(8.3,2.8) );

    return fbm( p + 4.0*r );
}</div>
<br>
Now we can start playing arround and getting some colors. For example, one could start from a simple color ramp based on <i>f</i>, then mix the color to a third one based on the magnitude of <i>q</i> and finally mix to a forth one based on the vertical component of <i>r</i>. Of course that is just one of the infinite amount of posibilities that we get here. In any case, doing so results in some nice colored image, like the one below or the one opening this article.<br>
<br>
<br>

<center><figure class="figureCentered">
<img class="myPicture" src="gfx05.jpg"/>
<figcaption><i>Using q and r to add coloring to the image - made in 2012</i></figcaption>
</figure></center>
<br>
<br>
This is a video using the same idea. You can find the source code for it and the realtime animated version here: <a class="regular" href="https://www.shadertoy.com/view/4s23zz">https://www.shadertoy.com/view/4s23zzM</a>:<br>
<br>

<center>
<video class="myPicture" muted loop controls disablepictureinpicture controlsList="nodownload nofullscreen noremoteplayback">
  <source src="vid01.mp4" type="video/mp4">
  <source src="vid01.webm" type="video/webm">
</video>
<br>
Using q and r to add coloring - made in 2012
</center>

<br>
<br>
<br>
And here's another one, embeded directly from <a class="regular" href="https://www.shadertoy.com/view/lsl3RH">https://www.shadertoy.com/view/lsl3RH</a> (where you can find the ource code):<br>
<br>

<div class="iframeCenter" style="max-width:800px;"><div>
<iframe frameborder="0" src="https://www.shadertoy.com/embed/lsl3RH" allowfullscreen></iframe>
</div></div>
<br>
<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>



	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>