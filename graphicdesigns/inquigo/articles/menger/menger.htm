        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/menger/menger.htm">menger fractal - 2011</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<h3>Intro</h3><hr>

Producing simple analytic shapes with for a raymarching engine is very simple, as seen in the in this <a class="regular" href="../distfunctions/distfunctions.htm">reference article</a> in this very website. Besides simple combination of shapes to construct more complex compound shapes, there is also the possibility to do this composition algorithmically. Probably the most basic way of algorithmic composition, is the recursive introduction of regular smaller details. This naturally produces classic Cantor fractals. A good example of that is the "untraceable" 1 kilobyte demo by TBC.<br>
<br>
<div class="partsC">
    <div class="part"><img class="myPicture" src="gfx01.jpg"/></div>
    <div class="part"><img class="myPicture" src="gfx03.jpg"/></div>
</div>
<br>

<br>
<br>
<div class="partsB">

<div class="part70">
Probably the most trivial example is that of the <a class="regular" href="http://en.wikipedia.org/wiki/Menger_sponge">Menger Spone</a>. Let's take this as an example and so some quick raymarching experiment. You can see the final result, running realtime, <a class="regular" href="http://www.iquilezles.org/apps/shadertoy/?p=mengersponge">here at the Shadertoy page</a>. I assume you already have some code working, and that you must have your basic raymarching intersection routine look looking something like this:<br>
<br>
<div class="code">vec3 intersect( in vec3 ro, in vec3 rd )
{
    for(float t=0.0; t&lt;10.0; )
    {
        vec3 h = map(ro + rd*t);
        if( h.x&lt;0.001 )
            return vec3(t,h.yz);
        t += h;
    }
    return vec3(-1.0);
}</div>
We will now define the map() function. We start by computing the distance to the unit cube:<br>
<br>
<div class="code">vec3 map( in vec3 p )
{
    float d = sdBox(p,vec3(1.0));
    return vec3(d,0.0,0.0);
}
</div>
<br>
We now construct a cross made of 3 infinite boxes, by doing their union:<br>
<br>
<div class="code">float sdCross( in vec3 p )
{
  float da = sdBox(p.xyz,vec3(inf,1.0,1.0));
  float db = sdBox(p.yzx,vec3(1.0,inf,1.0));
  float dc = sdBox(p.zxy,vec3(1.0,1.0,inf));
  return min(da,min(db,dc));
}
</div>
<br>
This can be optimized by using 2D boxes instead:<br>
<br>
<div class="code">float sdCross( in vec3 p )
{
  float da = sdBox(p.xy,vec2(1.0));
  float db = sdBox(p.yz,vec2(1.0));
  float dc = sdBox(p.zx,vec2(1.0));
  return min(da,min(db,dc));
}</div>
<br>
Now we scale the cross by one third, and perform the subtraction of the cross to the box<br>
<br>
<div class="code">vec4 map( in vec3 p )
{
   float d = sdBox(p,vec3(1.0));
   float c = sdCross(p*3.0)/3.0;
   d = max( d, -c );
   return vec4(d,1.0,1.0,1.0);
}</div>
<br>
Finally, we can do this subtraction many times, iteratively:<br>
<br>
<div class="code">vec3 map( in vec3 p )
{
   float d = sdBox(p,vec3(1.0));

   float s = 1.0;
   for( int m=0; m<3; m++ )
   {
      vec3 a = mod( p*s, 2.0 )-1.0;
      s *= 3.0;
      vec3 r = 1.0 - 3.0*abs(a);

      float c = sdCross(r)/s;
      d = max(d,c);
   }

   return vec3(d,0.0,0.0);
}</div>
<br>
For the sdCross() function, we can further optimize by noticing that we only care about the negative values of the 2d box functions. Therefore,<br>
<br>
<div class="code">float sdCross( in vec3 p )
{
  float da = maxcomp(abs(p.xy));
  float db = maxcomp(abs(p.yz));
  float dc = maxcomp(abs(p.zx));
  return min(da,min(db,dc))-1.0;
}</div>

</div>

<div class="part">
<img src="gfx05.jpg"/><br><i>sdBox()</i><br><br><br><br><br>
<img src="gfx06.jpg"/><br><i>sdCross()</i><br><br><br><br><br>
<img src="gfx07.jpg"/><br><i>sdBox() - sdCross()</i><br><br><br><br><br>
<img src="gfx08.jpg"/><br><i>sdBox() - iterate(sdCross())</i>
</div>
</div>

<br>
or even better,<br>
<br>
<div class="code">vec3 map( in vec3 p )
{
   float d = sdBox(p,vec3(1.0));

   float s = 1.0;
   for( int m=0; m<3; m++ )
   {
      vec3 a = mod( p*s, 2.0 )-1.0;
      s *= 3.0;
      vec3 r = abs(1.0 - 3.0*abs(a));

      float da = max(r.x,r.y);
      float db = max(r.y,r.z);
      float dc = max(r.z,r.x);
      float c = (min(da,min(db,dc))-1.0)/s;

      d = max(d,c);
   }

   return vec3(d,1.0,1.0);
}</div>
<br>
Last step is, to compute the material id based on the iteration count, and some fake occlusion too (see images on the right of the article to see how it looks like
when all these elements are put together):<br>
<br>
<div class="code">vec3 map( in vec3 p )
{
   float d = sdBox(p,vec3(1.0));
   vec3 res = vec3( d, 1.0, 0.0, 0.0 );

   float s = 1.0;
   for( int m=0; m<3; m++ )
   {
      vec3 a = mod( p*s, 2.0 )-1.0;
      s *= 3.0;
      vec3 r = abs(1.0 - 3.0*abs(a));

      float da = max(r.x,r.y);
      float db = max(r.y,r.z);
      float dc = max(r.z,r.x);
      float c = (min(da,min(db,dc))-1.0)/s;

      if( c>d )
      {
          d = c;
          res = vec3( d, 0.2*da*db*dc, (1.0+float(m))/4.0, 0.0 );
       }
   }

   return res;
}</div>



<br>
<br>
<div class="partsC">
    <div class="part"><img class="myPicture" src="gfx02.jpg"/></div>
    <div class="part"><img class="myPicture" src="gfx00.jpg"/></div>
</div>

<br>
Some neat tricks can be applied during the iterative subtraction of cubes, such as translating and rotating the point <i>p</i> a little bit in each iteration. That produces less symmetrical patterns, as can be seen in the images to the right of this article or here below (which was rendered with a simple <a class="regular" href="../simplepathtracing/simplepathtracing.htm">pathtracer</a>):<br>
<br>

<center><img class="myPicture" src="gfx09.jpg"/></center>
<br>
<br>
And finally, this is the source code for a reference implementation, rendered in realtime (click the play button to see it move, and the title in the image to jump to the source code):<br>
<br>
<div class="iframeCenter" style="max-width:800px;"><div>
<iframe frameborder="0" src="https://www.shadertoy.com/embed/4sX3Rn?gui=true&t=10&paused=true" allowfullscreen></iframe>
</div></div>
<!-- -------------------------------------------------------------------------------------------- -->


<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>