        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/gameoflife/gameoflife.htm">the game of life - 1998</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<div class="partsB">
    <div class="part50">
    Conway's Game of Life is probably one of the most famous algorithms ever. Mathematicians and computer scientists have been deeply attracted by it because it's incredibly simple to describe and code (it's not even 20 lines of code), yet it produces amazingly complex patterns. In fact, it can reproduce a variety of structures than grow, move, die, and reproduce themselfs. It was theorized that life could actually emerge from this algorithm, in the sense of selfreplicating structures. The truth is that the game of life has been studied and structures build such that all sort of functional structures grow, like clocks, logical gates, counters and so on, what allows at least to build computers within the universe of the game itslef.<br>
    <br>
    You can probably read about Conway's Game of Life in many places, but in short, it goes like this: you have a 2d grid of booleans values, for example, 1024x1024. Each cell in the grid can be dead (0) or alive (1). Now, we will execute one iteration (on generation) and the state of each cell will change depending on it's current state and the state of the cells around it. There are some simple rules that drive the process: if a cell is alive and there is two or three of the eight surounding cells are alive, then keep alive, otherwise die. If the cell is already dead, but three of the eight neighbour cells are alive, then the cell comes to life. Once all the cells of  the grid have been updated, we have a new generation and we can start again. The process repeats for ever, and so the patterns of zeros and ones evolve, forming  structures and so on. You need two buffers for this of course, one where you have the current generation of cells and another one where you are going to compute the  new one. You don't need to memcpy() any buffer, just use the right one when you want to display the results on screen, you can ping pong the process.<br>
    </div>

    <div class="part">
        <img class="myPicture" src="gfx01.png"/><br>
        <i>The life algorithm was used back in 2001 in one 64 kilobyte demo<br> called "Life". You can download it from this site.</i>
    </div>
</div>
<br>
<br>
Usually you start with a random generation, but you can also make a small editor and manually introduce structures you know are intersting. For example, you can try these very
cool ones:<br>
<br>
<table>
<tr>
<td>
<pre>
*...
*.*.
**..
</pre>
</td>
<td width="80"></td>
<td>
<pre>
.*..
***.
*.**
</pre>
</td>
<td width="80"></td>
<td>
<pre>
.**.**.
.**.**.
..*.*..
*.*.*.*
*.*.*.*
**...**
</pre>
</td>
<td width="80"></td>
<td>
<pre>
*..*.
....*
*...*
.****
</pre>
</td>
</tr>
</table>
<br>
Here you can find a small <a class="regular" href="http://iquilezles.untergrund.net/www/articles/gameoflife/lifetest.zip">executable</a> I made to test some interesting configurations (not optimized for multicore or SSE). And bellow you can find
basic implementation of the algorithm:<br>
<br>
<div class="partsB">
<div class="part">
<div class="code">
void lifeIterate( unsigned char *buffer1, const unsigned char *buffer2, int xres, int yres )
{
    memset( buffer1, 0, x*y );

    for( int j=1; j&lt;(yres-1); j++ )
    for( int i=1; i&lt;(xres-1); i++ )
    {
        const int off = x*j+i;

        const int k = buffer2[ off-x+1 ] + buffer2[ off-x+0 ] + buffer2[ off-x-1 ] +
                      buffer2[ off  +1 ] +                      buffer2[ off  -1 ] +
                      buffer2[ off+x+1 ] + buffer2[ off+x+0 ] + buffer2[ off+x-1 ];

        const int e = buffer2[ off ];
        if( ( e) && (k==3 || k==2) ) buffer1[ off ] = 1;
        if( (!e) && (k==3        ) ) buffer1[ off ] = 1;
    }
}</div>
</div>
<div class="part"><img class="myPicture" src="gfx00.png"/></div>
</div>
<br>
Remember it's reponsability of the caller to correctly use and pass the buffers <i>buffer1</i> and <i>buffer2</i>. As usual, <i>xres</i> and <i>yres</i> are the horizontal and vertical dimensions of the buffers (1024 for example)<br>
<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>