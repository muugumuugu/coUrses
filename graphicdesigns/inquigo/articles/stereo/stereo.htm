        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/stereo/stereo.htm">stereo - 2016</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<h3>Intro</h3><hr>
<br>

This article deals with fast stereo rendering. Stereo rendering is one of the basic building blocks of <a class="regular" href="../basicvr/basicvr.htm">VR rendering</a>, so it's worth spending some time trying to get it implemented right. One of the things novices mistakenly assume is that doing stereo is simply rendering the shadows and other eye-independant effects once and then rendering the rest of the scene twice. Or in other words, some variation of calling the render function in their game loop twice with different 'cameras'. This is a natural thing to do, but as we are going to see is this article, this is not how you do performant stereo rendering.
<br>
<br>
<br>
<h3>Basics</h3><hr>
<br>
So, the idea here is to get efficient stereo rendering, or in other words, get the engine to render stereo in less than twice the time it takes to render mono. As mentioned above, the most basic and naive implementation of stereo rendering would be something like this:<br>
<div class="code">
    DoProcessEye();                <span class="codeComment">// Do frustum culling, compile draw command/indirect buffers</span>
    DoRenderEyeCommon();           <span class="codeComment">// Render eye-shared shadow maps, and distant geometry with no parallax</span>
    for( int i=0; i < 2; i++ )     <span class="codeComment">// stereo</span>
    {
        DoRenderEye( i );          <span class="codeComment">// Render regular geometry and postpro effects with parallax</span>
    }</div>
<br>
or written in mode detail:<br>
<br>
<div class="partsL">
<div class="part">
<div class="code">    DoProcessEye();
    DoRenderEyeCommon();
    for( int i=0; i < 2; i++ )
    {
        BindRenderTarget( i )
        SetViewPort( i );
        SetEyeUniforms( i );
        
        for( int j=0; j < numObjects; j++ )
        {
            BindState( j );
            DrawObject( j );    
        }
    }
</div>
</div>

<div class="part">
<div class="code">layout (row_major, binding=1) uniform EyeUniforms
{
    mat4x4      mMatrix;
    mat4x4      mMatrixInverse;
};</div>
</div>
</div>

This will produce a correct stereo render, but not in an efficient way. First, the whole collection of visible objects is traversed twice. This can be a CPU burden. Also, this code produces twice as many render calls as a mono render, which is no good. Lasly, state changes such as shaders, uniforms and textures (represented by BindState() in the code) are duplicated as well, which can be a huge bottleneck. Lastly, the GPU will have to perform vertex pulling, shading and tessellation twice as well, something that can become a bottleneck as well.<br>
<br>
The central idea behind rendering stereo efficiently is to reverse the order of the inner and outer loops above, and transform the code into the following:<br>
<br>

<div class="partsL">
<div class="part">
<div class="code">    DoProcessEye();
    DoRenderEyeCommon();

    BindRenderTarget()
    SetViewPorts();
    SetEyeUniforms();

    for( int j=0; j < numObjects; j++ )
    {
        BindState( j );
        for( int i=0; i < 2; i++ )
        {
            DrawObject( i, j );
        }
    }</div>
</div>

<div class="part">
<div class="code">layout (row_major, binding=1) uniform EyeUniforms
{
    struct Eye
    {
        mat4x4      mMatrix;
        mat4x4      mMatrixInverse;
    }mEye[2];

    mat4x4      mMatrix;
    mat4x4      mMatrixInverse;
};</div>
</div>
</div>

Basically, instead of doing foreach(eye)|foreach(object) we change to foreach(object)|foreach(eye). The benefits are clear even at first sight: we have reduced the state changes to half. For this to work, we need to be able to rendering the left and right eyes without switching render targets, which is an expensive operation. For this to be possible we'll need one single render target but it will be twice as big usual. Basically, the same render target/texture will hold both the left and right eye. This seems like a great waste of space in most cases, since the multisampled buffers now need to be 2x as big (of course, the post-resolve and post-colo-grade/processing buffers stay the same, but those are cheap anyways since they are 1 sample per pixel anyways). Despite this extra 2x memory cost in all these expensive buffer, I am happy to pay given the performance benefits it enables.<br>
<br>
The other thing to note is that now the eye information uniform actually contains both the left and right eye transformation matrices. This, together with the fact that we uploaded both eye's viewport descriptions (check glViewportIndexed to see how to achieve this in OpenGL), will allow us to project the geometry correctly as seen from the left of right eye and route it to the correct viewport in the big left+right compound render target. The per-eye transformation are in the mEye[2] array, and the global viewer position is right after those two. As explained in the <a class="regular" href="../basicvr/basicvr.htm">basic VR rendering article</a>, use the formers for projection/rasterization purposes and the others for culling, level of detail, etc. Obviously, for this to work all you need to do is to index into the right mEye member based on the left/right index <b>i</b> within your shaders.<br>
<br>
There's a few ways to do this. From less efficient to more efficient, some of the ways are: <br>
<ol>
<li>Call DrawIndexed() twice, use a uniform to do projection+viewport routing (in the Vertex Shader)</li>
<li>Call DrawIndexedInstanced() once with instancing of 2 and use gl_InstanceID to do projection+viewport routing (in the Vertex Shader)</li>
<li>Call DrawIndexed() once with a Geometry Shader doing 2 invocations, and use the invokation id to do projection+viewport routing</li>
</ol>
The three methods do the viewport routing by using some mechanisms like gl_ViewportIndex (or gl_LayerID if you don't have multiviewport but have layered textures). For the sake of using modern and efficient APIs I am not considering the trivial case of doing it all the oldschool way with two DrawIndexed() with different projection and viewport state per call, nor doing manual viewport-ing with custom clipping planes. Now, the differences between the three proposed methods are these:<br>
<br>
<ul>
<li>The first option is the less efficient of the three. Beware we are benefiting from all the savings in state changes, but we are still processing all the vertices of each mesh twice and doing 2 render calls per objects.<br>
</li>
<li>With option number two, we are reducing the render calls to only one per instance. Routing is as simple as gl_ViewportIndex = gl_InstanceID. However, we are still running the vertex shader twice per object (meaning, we are reading from the vertex buffer memory twice and we are running the primitive assembly twice).</br>
</li>
<li>Option number three performs only one render call per object as well and runs the vertex shader only once. The duplication and routing happens in a Geometry Shader by specifying the number of invocations to be 2. These two invokations happen in parallel, as far as I know. In OpenGL, you can achieve this by using the qualifier "layout(invocations = 2) in;". Then, viewport routing is done with gl_ViewportIndex = gl_InvocationID.</li>
</ul>
My preferred method is 3, since I am using Geometry Shaders anyways. When I don't have one, I sometimes add one to enable the technique, and sometimes I use method 2 if the mesh is not too heavy. This works because gl_ViewportIndex can in fact be used in the Vertex Shader as well if your card has the GL_ARB_shader_viewport_layer_array extension. IN my case I got excellent performance of my invocation system in the Geometry Shader, method 3. Try each in your demo/game see what happens.<br>
<br>
So, after all the rearchitecturing, the final code looks like this:<br>
<br>

<div class="partsL">
<div class="part">
<div class="code">    DoProcessEye();
    DoRenderEyeCommon();

    BindRenderTarget()
    SetViewPorts();
    SetEyeUniforms();

    for( int j=0; j < numObjects; j++ )
    {
        BindState( j );
        DrawObject( j ); <span class="codeComment">// either DrawIndexed() + GS</span>
                         <span class="codeComment">// or DrawIndexedInstanced() + VS</span>
    }</div>
</div>

<div class="part">
<div class="code">layout (row_major, binding=1) uniform EyeUniforms
{
    struct Eye
    {
        mat4x4      mMatrix;
        mat4x4      mMatrixInverse;
    }mEye[2];

    mat4x4      mMatrix;
    mat4x4      mMatrixInverse;
};</div>
</div>
</div>
<br>
<h3>Conclusions</h3><hr>
<br>
With a little bit of work it is possible to remove the state changes, render call and vertex processing bottlenecks when doing stereo rendering, leaving only the pixel shading and framebuffer bandwidth bottlenecks. Optimizing those is for another article.

<!-- -------------------------------------------------------------------------------------------- -->

<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>