        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/voronoise/voronoise.htm">voronoise - 2014</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">


<h3>Intro</h3><hr>
Two of the most common building blocks for procedural pattern generation are Noise, which have many variations (Perlin's being the first and most relevant), and Voronoi (also known as "celular") which also has different variations. For Voronoi, the most common of those variations is the one that splits the domain in a regular grid such that there's one feature point in each of the cells. That means that Voronoi patterns are based on a grid after all just like Noise, the difference being that while in Noise the feature originators are in the vertices of the grid (random values or random gradients), Voronoi has the feature generators jittered somewhere in the grid. That might be a first indicator that, perhaps, the two patterns are not that unrelated, at least from an implementation perspective?<br>
<br>
Despite this similarity, the fact is that the way the grid is used in both patterns is different. Noise interpolates/averages random values (as in <a class="regular" href="http://en.wikipedia.org/wiki/Value_noise">value noise</a>) or
gradients (as in <a class="regular" href="http://en.wikipedia.org/wiki/Gradient_noise">gradient
noise</a>), while Voronoi computes the distance to the closest feature point. Now, smooth-bilinear interpolation and minimum evaluation are two very different operations, or... are they? Can they perhaps be combined
in a more general metric? If that was so, then both Noise and Voronoi patterns could be seen as particular cases of a more general grid-based pattern genereator?<br>
<br>
This article is about a small effort to find such generalized pattern. Of course, the code implementing such generalization will never be as fast as implementations of the particular cases (rendering this articles with 
no obvious immediate practical purpose), but at least it might open the window to a bigger picture understanding and perhaps, one day, new findings!<br>
<br>
<br>
<center>
<img class="myPicture" src="gfx00.jpg"/><i><br>Voronoise - a combination of Voronoi, and Noise</i>
</center>
<br>

<br>
<h3>The code</h3><hr>

In order to generalize Voronoi and Noise, we  must introduced two parameters: one to control the amount of jittering of the feature points, and one for controling the metric. Let's call the grid control parameter <b>u</b>,
and the metric controler <b>v</b>.<br>
<br>
The grid parameter is pretty simple to design: <b>u=0</b> will simply use a Noise-like regular grid, and <b>u=1</b> will be the Voronoi-like jittered grid. So, the value of <b>u</b> can simply control the amount of jitter. Straightforward.<br>
<br>
The <b>v</b> parameters will have to blend between a Noise-like bilinear interpolator of values, and a Voronoi-like min operator. The main difficulty here is that the min() operation is a non-continuous function. However, luckily 
enough for
us, there are smooth alternatives such as the <a class="regular" href="../smoothvoronoi/smoothvoronoi.htm">Smooth Voronoi<a>
    . If we apply a power functions to the distance to each feature points in order to highlight the closest
    one over the rest, then we get a nice side effect: using a power of 1 gives all features the same relevance and therefore we get an equal interpolation of features, which is what we need for Noise-like patterns! So, something like
    this might do it:<br>
    <br>
    <div class="code">float ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), 64.0 - 63.0*v );</div>
    <br>
    However, a bit of experimentation proves that a better perceptually linear interpolation between the Noise-like and the Voronoi-like pattern can be achieved by rising <b>v</b> to some power:<br>
    <br>
    <div class="code">float ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), 1.0 + 63.0*pow(1.0-v,4.0) );</div>
    <br>
    So, it seems that after all it's not so difficult to generalize Noise and Vonoroi. Therefore, assuming one has a way to generate random values deterministically as a function of the grid cell id (which you are already doing both
    in your favourite Voronoi and Noise implementations), which we could call<br>
    <br>
    <div class="code">vec3 hash3( in vec2 p )</div>
    <br>
    then the code for our new generalized super pattern could be like this:<br>
    <br>
    <div class="code">float noise( in vec2 x, float u, float v )
{
    vec2 p = floor(x);
    vec2 f = fract(x);

    float k = 1.0 + 63.0*pow(1.0-v,4.0);
    float va = 0.0;
    float wt = 0.0;
    for( int j=-2; j<=2; j++ )
    for( int i=-2; i<=2; i++ )
    {
        vec2  g = vec2( float(i), float(j) );
        vec3  o = hash3( p + g )*vec3(u,u,1.0);
        vec2  r = g - f + o.xy;
        float d = dot(r,r);
        float w = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );
        va += w*o.z;
        wt += w;
    }

    return va/wt;
}</div><br>
    The implementation is very similar to the <a class="regular" href="../voronoilines/voronoilines.htm">regular Voronoi pattern</a>, the difference being that we now have the weighted average of distance computations happening (the
    accumulation happens in <b>wa</b> and the counting for later normalization is in <b>wt</b>.
    <br>

    <br>
    <h3>Results</h3><hr>
    <br>

    The results of the generalization are rather interesting. Of course, we have generalized Noise and Voronoi. Indeed, noise happens when <b>u=0, v=1</b>, ie, regular grid and interpolation of feature distances. Voronoi happens when
    <b>u=1, v=0</b>, ie, when the grid is jittered and the metric is the minimum distance.<br>
    <br>
    However there's two side effects. The first happens when <b>u=0, v=0</b>, which gives a minimun distance to a non jittered grid of features. This basically gives a patten with a constant value per grid cell, or what normally
    is called "cell noise".<br>
    <br>
    The second side effect happens for <b>u=1, v=1</b>, which generates a pattern that has an interpolated value of distances to features in a jittered grid. It's a combination of Voronoi and Noise, or as I am naming it,
    <b>Voronoise</b> (top right in the image). This pattern can be useful for regular procedural generation where grid artifacts are visible, because the jittering certainly hides the underlaying grid structure of Noise.<br>
    <br>
    <figure>
        <img class="myPicture" src="gfx01.jpg" />
        <figcaption>Botton Left: u=0, v=0: Cell Noise<br>Botton Right: u=0, v=1: Noise<br>Top Left: u=1, v=0: Voronoi<br>Top Right: u=1, v=1: Voronoise
        </figcaption>
    </figure>
    <br>
    A realtime interactive implementation of the code above can be found here (click in the title to navigate to the source code, or simply move the mouse along the image to vary the <b>u</b> and <b>v</b> parameters.<br>
    <br>
    <div class="iframeCenter" style="max-width:800px;"><div>    
    <iframe frameborder="0" src="https://www.shadertoy.com/embed/Xd23Dh" allowfullscreen></iframe>
    </div></div>
    <!-- -------------------------------------------------------------------------------------------- -->
    <br>
    <br>
    <br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>