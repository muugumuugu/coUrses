        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/ellipsedist/ellipsedist.htm">distance to an ellipse - 2009</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">

Often, ellipses are usually not much more difficult than disks/circles, and one can compute lots of their properties analytically and easily, like their <a class="regular" href="../ellipses/ellipses.htm">bounding boxes and intersections</a>. However, some properties turn out to be a bit more complicated to compute than one would expect. One such property is the distance from a point to an ellipse, in 2D!<br>
<br>
<br>
<h3>Method 1 - analytical (quartic equation)</h3>
<hr>
<br>
So, for a given point in the plane <span class="formulaText">p={x,y}</span> and a parametric ellipse <i>q</i> centered in the origin with radii <i>a</i> and <i>b</i> in the <i>x</i> and <i>y</i> axes, <span class="formulaText">q(&omega;) = { a&sdot;cos &omega;, b&sdot;sin &omega; }</span>, the square of the distance from <i>p</i> to the ellipse is<br>
<br>
<span class="formulaText">s<sup>2</sup>(&omega;) = |q(&omega;)-p|<sup>2</sup></span>
<br>
<br>
which expands to<br>
<br>
<span class="formulaText">s<sup>2</sup>(&omega;) = |q(&omega;)-p|<sup>2</sup> = |q(&omega;)|<sup>2</sup> - 2&lt;q(&omega;),p&gt; + |p|<sup>2</sup> = a<sup>2</sup>&sdot;cos<sup>2</sup>&omega; + b<sup>2</sup>&sdot;sin<sup>2</sup>&omega; + x<sup>2</sup> + y<sup>2</sup> - 2(a&sdot;x&sdot;cos &omega; - b&sdot;y&sdot;sin &omega;)</span>
<br>
<br>
The closest point will be for an &omega; such that<br>
<br>
<img valign="bottom" class="formula" src="gfx04.png"/>
<br>
<br>
which expands to<br>
<br>
<span class="formulaText">(b<sup>2</sup>-a<sup>2</sup>)&sdot;sin &omega;&sdot;cos &omega; + ax&sdot;sin &omega; - by&sdot;cos &omega; = 0</span>
<br>
<br>
This calls for the change of variable &lambda;=cos(&omega;), so that<br>
<br>
<img valign="bottom" class="formula" src="gfx07.png"/>
<br>
<br>
which expands into a quartic equation with the following coefficients:<br>
<br>
<img valign="bottom" class="formula" src="gfx08.png"/>
<br>
<br>
or by dividing the equation by the leading coefficient k<sub>4</sub> (the only condition to be able to do so is that the ellipse is not, in fact, a circle), and by then renaming <img valign="middle" class="formula" src="gfx09.png"/>,<br>
<br>
<span class="formulaText">k<sub>4</sub> = 1<br>
k<sub>3</sub> = 2m<br>
k<sub>2</sub> = m<sup>2</sup> + n<sup>2</sup> - 1<br>
k<sub>1</sub> = -2m<br>
k<sub>0</sub> = -m<sup>2</sup></span><br>
<br>
From this point on we proceed to resolve the <a class="regular" href="http://mathworld.wolfram.com/QuarticEquation.html">quartic equation</a> analytically with the standard method. Due to some of the symmetries in the coefficients, we get some pretty nice simplifications though. For example, the resolvent <a class="regular" href="http://mathworld.wolfram.com/CubicFormula.html">cubic equation</a> loses its linear term and then depresses to<br>
<br>
<span class="formulaText">p<sup>3</sup> - 3Qp + 2R = 0</span>
<br>
<br>
with<br>
<br>
<img valign="middle" class="formula" src="gfx13.png"/><br>
<br>
<br>
Due to all the symmetries mentioned, and the fact that we know we are looking only for real roots (possibly only one, if we are measuring the distance from a point outside the ellipse), the code gets quite compact. Also,
we use the symmetry of the geometrical problem and we force our point to be on the first quadrant of the coordinate system (x>0 and y>0).<br>
<br>
<div class="code">float sdEllipse( in vec2 p, in vec2 ab )
{
    vec2 p = abs( p ); if( p.x&gt;p.y ){ p=p.yx; ab=ab.yx; }
	
    float l = ab.y*ab.y - ab.x*ab.x;
    float m = ab.x*p.x/l; float m2 = m*m;
    float n = ab.y*p.y/l; float n2 = n*n;
    float c = (m2 + n2 - 1.0)/3.0; float c3 = c*c*c;
    float q = c3 + m2*n2*2.0;
    float d = c3 + m2*n2;
    float g = m + m*n2;

    float co;

    if( d&lt;0.0 )
    {
        float p = acos(q/c3)/3.0;
        float s = cos(p);
        float t = sin(p)*sqrt(3.0);
        float rx = sqrt( -c*(s + t + 2.0) + m2 );
        float ry = sqrt( -c*(s - t + 2.0) + m2 );
        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;
    }
    else
    {
        float h = 2.0*m*n*sqrt( d );
        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );
        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );
        float rx = -s - u - c*4.0 + 2.0*m2;
        float ry = (s - u)*sqrt(3.0);
        float rm = sqrt( rx*rx + ry*ry );
        float p = ry/sqrt(rm-rx);
        co = (p + 2.0*g/rm - m)/2.0;
    }

    float si = sqrt( 1.0 - co*co );
 
    vec2 q = vec2( ab.x*co, ab.y*si );
	
    return length(q-p) * sign(p.y-q.y);
}</div>
<br>
<br>
An interactive version (click and move the mouse over the ellipse to deform it) and reference code (click in the title of the viewport) can be found here:<br>
<br>
<div class="iframeCenter" style="max-width:800px;"><div>
<iframe frameborder="0" src="https://www.shadertoy.com/embed/4sS3zz?gui=true&t=10&paused=true" allowfullscreen></iframe>
</div></div>

<br>
<br>
<br>
<br>
<h3>Method 2 - Newton iterations</h3>
<hr>
<br>
Unfortunately, the analytical method is both expensive and not very stable, in that the root finder is difficult to keep under control when the ellipse is close to a circle or when it is very eccentric. As a result the distance computation returns wrong values sometimes.<br>
<br>
An alternative is to consider a numeric solver. So, let's start computing the closes point to p on the ellipse, q. We know that the vector p-q will have to be perpendicular to the tangent of the ellipse at q. So, if we parametrize the ellipse again as <span class="formulaText">q(&omega;) = { a&sdot;cos &omega;, b&sdot;sin &omega; }</span>, then<br>
<span class="formulaText">&lt;p-q(&omega;), q'(&omega;)&gt; = 0</span><br>
<br>
with q'(&omega;) being the tangent, which takes this form:<br>
<br>
<span class="formulaText">q'(&omega;) = { -a&sdot;sin  &omega;, b&sdot;cos &omega;}</span><br>
<br>
If we expand, we get the equation<br>
<br>
<span class="formulaText">f(&omega;) = -a&sdot;sin &omega; &sdot;(x-a&sdot;cos &omega;) + b&sdot;cos &omega; &sdot;(y-b&sdot;sin &omega;) = 0</span><br>
<br>
which we are going to solve by using Newton-Raphson method, for which we need the derivative of the function above:<br>
<br>
<span class="formulaText">f'(&omega;) = -&lt;p-u,v&gt; - &lt;v,v&gt;</span><br>
<br>
with<br>
<br>
<span class="formulaText">u = { a&sdot;cos &omega;, b&sdot;sin &omega; }</span><br>
<span class="formulaText">v = {-a&sdot;sin &omega;, b&sdot;cos &omega; }</span><br>
<br>
So our iterative process will be<br>
<br>
<span class="formulaText">&omega;<sub>n+1</sub> = &omega;<sub>n</sub> + &lt;p-u,v&gt; / (&lt;p-u,u&gt; + &lt;v,v&gt;) </span><br>
<br>
The most difficult part is ensuring that the initial value of &omega;, &omega;<sub>0</sub> makes the sequence converge to the desired root. An reasonable value for &omega;<sub>0</sub> can be computed by stretching the space so the ellipse becomes a circle, computing the closest point from the stretched p to the circle, and then undoing the stretch:<br>
<br>
<span class="formulaText">&omega;<sub>0</sub> = atan(a&sdot;y / b&sdot;x)</span></br>
<br>
Because we are going to work only with the first quadrant of the plane (since the ellipse is symmetric anyways), this will be fine. In fact, the sequence will converge for all points in the exterior of the ellipse. Unfortunately, some point in the interior will not converge, and a different initial &omega;<sub>0</sub> is required for them. In my implementation, I decided to select all the point bellow the line passing through the discontinuity of the gradient with slope (a,b), and make them start at &omega;<sub>0</sub> = 0.<br>
<br>
The code bellow implements this method to compute the distance to an ellipse:<br>
<br>
<div class="code">float sdEllipse( in vec2 p, in vec2 ab )
{
    <span class="codeComment">// symmetry</span>
    p = abs( p );
    
    <span class="codeComment">// determine in/out and initial omega value</span>
    bool s = dot(p/ab,p/ab)>1.0;
    float w = s ? atan(p.y*ab.x, p.x*ab.y) : 
                  ((ab.x*(p.x-ab.x)&lt;ab.y*(p.y-ab.y))? 1.5707963 : 0.0);
    
    <span class="codeComment">// find root with Newton solver</span>
    for( int i=0; i&lt;4; i++ )
    {
        vec2 cs = vec2(cos(w),sin(w));
        vec2 u = ab*vec2( cs.x,cs.y);
        vec2 v = ab*vec2(-cs.y,cs.x);
        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));
    }
    
    <span class="codeComment">// compute final point and distance</span>
    return length(p-ab*vec2(cos(w),sin(w))) * (s?1.0:-1.0);
}</div>
<br>
The code above uses 4 iterations, which produces acceptable results. For some extremely eccentric ellipses the number of iterations might need to be increased. Assuming GPUs compute sin and cos of the same angle in a single instruction, and that this instructions is very fast (which it is), then the code above is not that bad compared to the analytic solver. But it is much more robust.<br>
<br>
<br>
This is the interactive version and reference code for this new implementation (again, click and move the mouse on the ellipse to deform it):<br>
<br>
<div class="iframeCenter" style="max-width:800px;"><div>
<iframe frameborder="0" src="https://www.shadertoy.com/embed/4lsXDN?gui=true&t=10&paused=true" allowfullscreen></iframe>
</div></div>
<!-- -------------------------------------------------------------------------------------------- -->

<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>
