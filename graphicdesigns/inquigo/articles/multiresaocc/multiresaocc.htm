        

<!DOCTYPE HTML>
<html>

	<head>
        <meta charset="ISO-8859-1">
		<meta name="keywords" content="quilez, inigo, iÃ±igo, fractals, demoscene, computer graphics, mathematics, rendering, demo, 3D, realtime, shader, raytracing, shadertoy, glsl">
		<meta name="description" content="Tutorials and articles of Inigo Quilez on computer graphics, fractals, demoscene, shaders and more.">
		<meta name="author" content="Inigo Quilez">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		
		<meta property="og:title" content="Inigo Quilez" />
		<meta property="og:description" content="Articles on computer graphics, math and art">
		<meta property="og:type" content="article" />
		<meta property="og:image" content="https://iquilezles.org/logo.jpg" />
		<meta property="og:image:type" content="image/jpg" />
		<meta property="og:url" content="https://iquilezles.org" />
		
		<meta name="twitter:title" content="Inigo Quilez">
		<meta name="twitter:description" content="Articles on computer graphics, math and art">
		<meta name="twitter:image" content="https://iquilezles.org/logo.jpg">
		<meta name="twitter:card" content="summary_large_image">

		<link rel="canonical" href="https://iquilezles.org"/>
		<title>Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more</title>
		<link href="/style.css?v=11" rel="stylesheet">
		
		<script async src="https://www.googletagmanager.com/gtag/js?id=G-M1E3CY9CCC"></script>
        <script>window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments);}gtag('js',new Date());gtag('config', 'G-M1E3CY9CCC');</script>

	</head>

	<body><div style="display:flex;flex-direction:column;min-height:100vh;">
		
		<header>
		
		<div>
		  <a class="menu" href="/index.html">Inigo Quilez</a>
		
		  &nbsp; :: &nbsp; <a class="menu" href="/www/index.htm">articles</a>&nbsp; :: &nbsp; <a class="menu" href="/www/articles/multiresaocc/multiresaocc.htm">multiresolution ambient occlusion - 2012</a>		</div>
		
		<!--<div style="font-size:0.75em;margin:0;padding:0;">-->
		<!--<div style="margin:0;padding:0;background-color:#00ff00;display:flex;justify-self:self-end;">-->
		<div style="padding:0;margin:0;border:0;display:flex;flex-flow:row wrap;justify-content:flex-end;">
			<a href="https://twitter.com/iquilezles"><img class="socialMediaIcon" src="/imgTwitter.png"/></a>
			<a href="https://www.youtube.com/channel/UCdmAhiG8HQDlz8uyekw4ENw"><img class="socialMediaIcon" src="/imgYoutube.png"/></a>
			<a href="https://www.shadertoy.com/user/iq/"><img class="socialMediaIcon" src="/imgShadertoy.png"/></a> 
            <a href="https://www.patreon.com/inigoquilez"><img class="socialMediaIcon" src="/imgPatreon.png"/></a>
			<a href="http://paypal.me/inigoquilez"><img class="socialMediaIcon" src="/imgPayPal.png"/></a> 
			<a href="https://www.tiktok.com/@inigoquilez"><img class="socialMediaIcon" src="/imgTikTok.png"/></a> 
		<!--<a href="https://space.bilibili.com/673661710"><img class="socialMediaIcon" src="/imgBiliBili.png"/></a>-->
		</div>
		
		</header>
		
        <div id="container" style="flex-grow:1;">

<h3>Intro</h3><hr>


<p>
While we wait the technology to progress enough for realtime global illumination to be possible, we have to find hacks if we want to create believable images. Over the years, a countless amount of hacks have been developed, from high quality precomputed light probes encoded in spherical harmonics and stored in volumetric data structures (like octrees or tetrahedra grids) or plain textures, to dynamic approximations with raymarching in low resolution volumes, or mini-rasterization of pointclouds, to screen space hacks like screen space ambient occlusion (SSAO) and color bleeding (SSCB).
</p>
<p>
From all, the most popular technique among the hobbyists has been the SSAO, for it doesn't need the tedious development of baking tools at all, but a simple pixel shaders with a handful of lines of code. In my opinion, it's also the most abused and probably wrongly applied effect (closely followed by bloom), but more of that later.
</p>
<br>

<figure><img class="myPicture" src="gfx09.jpg"/><figcaption>Realtime (multiresolution) ambient occlusion (OpenGL)</figcaption></figure>
<figure><img class="myPicture" src="gfx12.jpg"/><figcaption>Final realtime image (OpenGL)</figcaption></figure>

<br>
<p>
Besides halos and performance, the main issue that limits the usability of SSAO is the range of distances at which the technique produces results that can be interpreted as occlusion. Indeed, high neighbor sampling kernels not only are expensive but actually do not represent occlusion very well, due to the lack of second and third depth layers to sample from. At the same time if the kernel is made too small the illusion of occlusion disappears as well, and all that remains is an ugly edge enhancer which gives it all a horrible cartoon shading effect. So, it seems that traditional SSAO is optimal only to solve medium frequency occlusion, while big/small size occlusion (low/high frequencies) need something else.
</p>
<p>
In this article we'll see one approach to solve the three types of occlusion for one specific type of scene, although the ideas can be (and probably has been) in other contexts.
</p>

<br>
<br>
<br>
<br>
<br>

<figure><img class="myPicture"  src="gfx02.jpg"/><br><figcaption>High frequency occlusion</figcaption></figure>
<figure><img class="myPicture"  src="gfx03.jpg"/><br><figcaption>Medium frequency occlusion</figcaption></figure>
<figure><img class="myPicture"  src="gfx04.jpg"/><br><figcaption>Low frequency occlusion</figcaption></figure>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Medium frequency ambient occlusion</h3><hr>

<p>
As said, this can be solved with the traditional SSAO technique, which is more than documented enough, in all its flavours, variations and versions. I'd say, almost every developer has its own version of SSAO. In my case, I basically write a new one from scratch for every demo or shot in a demo. They are all very similar, though, probably something similar to this:
</p>
<div class="code">uniform vec3       unKernel[16];
uniform sampler2D  unTexZ;
uniform sampler2D  unTexN;
uniform sampler2D  unTexR;

float ssao( in vec2 pixel )
{
    vec2  uv  = pixel*0.5 + 0.5;
    float z   = texture2D( unTexZ, uv ).x;      <span class="codeComment">// read eye linear z</span>
    vec3  nor = texture2D( unTexN, uv ).xyz;    <span class="codeComment">// read normal</span>
    vec3  ref = texture2D( unTexD, uv ).xyz;    <span class="codeComment">// read dithering vector</span>

    <span class="codeComment">// accumulate occlusion</span>
    float bl = 0.0;
    for( int i=0; i&lt;16; i++ )
    {
        vec3  of = orientate( reflect( unKernel[i], ref ), nor );
        float sz = texture2D( unTexZ, uv+0.03*of.xy).x;
        float zd = (sz-z)*0.2;
        bl += clamp(zd*10.0,0.1,1.0)*(1.0-clamp((zd-1.0)/5.0,0.0,1.0));
    }

    return 1.0 - 1.0*bl/16.0;
}</div>
<p>
In this case I'm using the oldest SSAO known (with the usual reflection based dithering) plus sample orientation based on the normal (which makes better use of the samples, plus brings normal mapped detail to the occlusion signal). The <i>orientate()</i> function flips the input vector if its dot product with the normal is negative. I'm putting the gbuffer normals and eye linear z in two different textures for less bandwidth usage during the z sampling loop.
</p>
<p>
But of course here you can and should apply your preferred SSAO variation, with your dithering method of choice (none, per pixel 2d rotation matrix or random reflection vector), your preferred halo removal trick, you can do this at a quarter resolution and then bilaterally upsample, you can use the normal in a more fancy way than i did, you can do smooth volumetric occlusion, etc etc etc. You pick your flavour, more than 5 years of documented SSAO experiments should be enough for anybody :D
</p>
<br><img class="myPicture" src="gfx05.jpg"/><br><span class="imgFooter">Medium frequency occlusion - standard SSAO</span><br>



<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>High frequency ambient occlusion</h3><hr>

<p>
High frequency occlusion, in this scene I'm dealing with and in many others, can be regarded as the occlusion an object casts on itself. That means that the occlusion signal can probably come from the model itself, either in form of backed information or with a procedural description.
</p>
<p>
In case of nature, a procedural description for occlusion makes a lot of sense. The same procedural methods that grow the grass, bushes, tree trunks and branches or canopies can take care of producing an occlusion signal too that matches the procedurally generated geometry. In other words, since the code/procedure generates the geometry, it knows about it (like, where it is, how big it is), therefore it can produce plausible occlusion information.
</p>
<br><img class="myPicture" src="gfx06.jpg"/><br><span class="imgFooter">High frequency occlusion - procedural occlusion</span><br>
<br>
<p>
For example, when generating leaves for a tree canopy, those in the inner part of the canopy can get darker than those outside (this is a very simplistic approach, but it shows the concept). The code that procedurally grows the grass can shader blades darker or brighter depending their relative position to the clump they belong to. The trunk of a procedural tree can get darker in the areas where the amount of branches is higher, etc etc.
</p>
<p>
These might seem like naive observations and way to do high frequency occlusion, but in practice it works very well.
</p>
<p>
If for some esoteric reason you were looking for something more "physically realistic", you could bake the local high frequency occlusion of your models per vertex or in a lightmap.
</p>
<p>
The idea of course is to not bake all the occlusion we can procedurally. Sometimes it's tempting to be too clever and generate procedurally or bake as much occlusion as possible, but we don't want to do that, for the point is to make occlusion realtime and as automatic as possible as part of the lighting solution. So, we want to generate/bake only the occlusion that the medium frequency realtime ambient occlusion (SSAO in our case) cannot capture.
</p>
<p>
Now we have to combine the new high frequency occlusion with the classic medium frequency occlusion. The very naive multiplication of signals works just beautifully:
</p>
<br><img class="myPicture" src="gfx07.jpg"/><br><span class="imgFooter">Medium frequency occlusion (SSAO) multiplied with the high frequency occlusion (procedural)</span><br>


<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Low frequency ambient occlusion</h3><hr>

<p>
This is the occlusion which comes from objects too far for the SSAO to capture. One could bake the information in low resolution lightmaps, but instead, game/demo specific tricks can be used which are cheaper, don't require tools or an export pipeline, and can be realtime.
</p>
<p>
In the case of the scene that we are currently playing with, we have an outdoors scene, so what we basically want to see is the trees and big rock formation casting occlusion around and beneath them. One way to get something like that easily is by rendering a shadowmap with a vertical direction that captures all of the trees and rocks, then do a super blurry/lp-filtered lookup. That sort of makes the job of darkening the areas below the trees and leak a bit of darkness to the neighboring objects.
</p>
<br><img class="myPicture" src="gfx08.jpg"/><br><span class="imgFooter">Low frequency occlusion - blurry shadowmap</span><br>
<p>
<br>
Probably three more blurry shadowmaps could be additionally rendered rotated 120 degrees azimuth and 45 degree in altitude and get a much better approximation to low frequency ambient occlusion. But remember that perfect ambient occlusion doesn't make a good image anyway, it's still a hack in itself far from proper light propagation.
</p>
<p>
Despite I can imagine something more elaborate that a simple multiplication for combining the low occlusion with the medium and high frequency occlusion, seems like the multiplication isn't that bad really:
</p>
<br><img class="myPicture" src="gfx09.jpg"/><br><span class="imgFooter">High (procedural), medium (SSAO) and low (shadowmap) frequency occlusion multiplied</span><br>


<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>
<h3>Results</h3><hr>

<p>
Now that we have a beautiful occlusion signal, it's time to use it in our lighting pass.
</p>
<p>
One mistake most beginners do is to use the occlusion as a multiplier to the whole lighting equation. That's is <b>NOT A GOOD IDEA</b>, and among other issues, it produces horrible ghosting effect that have become sadly regular in most realtime rendering efforts. Now, even if you had perfect halo free ambient occlusion, multiplying the whole lighting equation with it would still be <b>A REALLY BAD IDEA</b>.
</p>
<p>
Ambient occlusion is, after all, an occlusion factor for the ambient lighting. "Ambient" is a bit of a vague term, but in the context of classic OpenGL-kind of rendering, it probably means all lights but the key lights, meaning the sky dome lighting, all of the bounce lighting, and the rims. In practice, it means that you probably only want your occlusion signal to affect all the lights witch are not strong direct lighting sources. In our case, the occlusion will affect everything but the sun light. It's all up to you to choose how much occlusion you leak in each light, and there are many ways to do this. You can even colorize the occlusion signal with a color ramp to bring some extra richness to the image.
</p>
<br><img class="myPicture" src="gfx10.jpg"/><br><span class="imgFooter">Multiresolution ambient occlusion used with ambient lighting</span><br>
<p>
<br>
If you allow me, here goes another advice: do not implement the infamous "hemispherical occlusion",  the trick of modulating occlusion with the vertical component of the surface's normal. That's probably a really bad idea because, again, we want to use occlusion as little as we possible can (remember it's an ugly hack). Instead we want to use real lighting equations and framework. So, in order to do proper sky-dome kind of lighting, put a blue directional light coming from up in the sky pointing downwards (which produces a blue version of the otherwise gray-dead hemispherical occlusion trick), and give it some color variation based on the incident angle. That looks a million times better than the horrible hemispherical occlusion, and it is equally cheap.
</p>
<br><img class="myPicture" src="gfx12.jpg"/><br><span class="imgFooter">Final render (key light added)</span><br>
<p>
<br>
Anyway, this is not a lighting tutorial. So, back to the multiresolution occlusion, when you apply it to the ambient lighting, you quickly get results that look acceptable for the little amount of work and embarrassingly simple algorithms/ideas that we have been using. Here you can see the scene rendered with only ambient light using the multiresolution occlusion described in this article, and the same image with the sun light added.
</p>

<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
Another view of the same scene:<br>
<br>
<img class="myPicture" src="gfx11.jpg"/>
<!-- -------------------------------------------------------------------------------------------- -->
<br>
<br>
<br>




	
    

    </div> <!-- container -->
	<footer><a href="http://www.iquilezles.org">inigo quilez</a> - learning computer graphics since 1994</footer>
    </div></body>
</html>