<html xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="Author" content="Lionel E. Deimel">
<meta name="description" content="Advice about how to generate curve-stitch designs by writing PostScript code by Lionel E.Deimel.">
<meta name="keywords" content="recreational mathematics, design,  parabola, curve stitch, curve stitch parabola, straight line designs, PostScript, coding, GSView, encapsulated PostScript, Adobe, Acrobat">
<title>Make Your Own Designs</title>

<!--[if gte mso 9]><xml>
<mso:CustomDocumentProperties>
<mso:Approval_x0020_Level msdt:dt="string"></mso:Approval_x0020_Level>
<mso:Categories msdt:dt="string">Recreational Mathematics</mso:Categories><mso:Assigned_x0020_To msdt:dt="string"></mso:Assigned_x0020_To></mso:CustomDocumentProperties></xml>
<![endif]-->
<link rel="shortcut icon" href="http://deimel.org/images/favicon.ico" type="image/x-icon">
<!--mstheme--><link rel="stylesheet" type="text/css" href="../_themes/farrago/farr1100.css"><meta name="Microsoft Theme" content="farrago 1100, default">
<meta name="Microsoft Border" content="tb">
</head>

<body><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
	<tr>
		<td width="100%" align="center">
		<div align="center">
			<center>
			<table border="0" width="610">
				<tr>
					<td><font size="6"><strong><a name="Top"></a>
					<img src="_derived/do-it-yourself.htm_cmp_farrago100_bnr.gif" width="600" height="60" border="0" alt="Curve-stitch Designs"></strong></font></td>
				</tr>
				<tr>
					<td>
					<p align="center"><font size="2">
					<nobr>[&nbsp;<a href="general_14.htm" target="">Previous</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="../" target="">Home</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="curve_stitch.htm" target="">Up</a>&nbsp;]</nobr></font></p>
					<p align="center">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>
				</tr>
			</table>
			</center></div>
		</td>
	</tr>
</table>

</td></tr><!--msnavigation--></table><!--msnavigation--><table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">
<div align="center">
  <center>
  <table border="0" width="610">
    <tr>
      <td>
<h2 align="center">Make Your Own Designs<br>
<font size="4"><i>by Lionel E. Deimel</i></font></h2>
        <p><font size="6">A</font> number of people have asked me how to create 
		curve-stitch designs using PostScript. I have invariably given 
		fragmentary instructions with little expectation that my correspondents 
		would actually have the patience to produce designs of their own with 
		this arcane tool. A recent request from a teacher, however, led me to 
		think that, given a bit more guidance, a few dedicated souls might give 
		my technique a try. Rather than responding at length in a personalized 
		reply to everyone who contacts me, I thought it might be more efficient 
		to provide some instructions on my Web site once and for all. No doubt, 
		this, too, will generate questions, but it might also lead others to 
		produce some innovative designs.</p>
<p><b>Background.</b> My earliest curve-stitch designs were done with pencil and paper. I 
		produced serious designs by trading my pencil for drafting pens and 
		India ink. All the designs shown on <b>Lionel Deimel’s Farrago</b> are 
		produced by computer using the PostScript Language, however. (PostScript is a 
		registered trademark of <a target="_blank" href="http://www.adobe.com/">
		Adobe Systems Incorporated</a>.) PostScript is a so-called page 
		description language now widely used for desktop and commercial 
		publishing. It first achieved prominence as the language interpreted by 
		Apple’s LaserWriter printer in 1985. PostScript came along about 20 
years after I had given up the tedium of drawing designs with pen and ink.</p>
<p>Although most of the PostScript code generated today is produced by computer 
software to drive devices such as printers, PostScript is a full-blown 
programming language that can be used by a human programmer. What makes 
PostScript attractive for producing curve-stitch designs is its extensive 
repertoire of graphics operators and the ability of PostScript interpreters to 
reproduce lines, whether curved or straight, at high resolutions.</p>
<p>The downside of programming in PostScript, at least for the typical 
programmer, is that PostScript is a highly idiosyncratic language. Programming 
experience is certainly an asset for the person wanting to learn how to use 
PostScript, but it is less helpful than one might expect. PostScript makes 
extensive use of stacks (FIFO queues), which results in code likely not to seem 
very natural to most programmers. For example, one might write the following 
PostScript code to set the variable <i>y</i> to the value 3 (<i>x</i> + <i>y</i>) 
+ 1:</p>
<p style="text-align: center">/y 1 3 x y add mul add def</p>
<p style="text-align: left">One could just have easily written</p>
<p style="text-align: center">/y x y add 3 mul 1 add def</p>
<p style="text-align: left">or some other variant.</p>
<p style="text-align: left"><b>Tools.</b> The standard introduction to PostScript has 
long 
been
<a target="_blank" href="http://search.barnesandnoble.com/booksearch/isbnInquiry.asp?z=y&EAN=9780201101799&itm=1">
<i>PostScript Language Tutorial and Cookbook</i></a>, which is available as a 
PDF
<a target="_blank" href="http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF">
here</a>. Reading this book and following the exercises in it is a good way to 
learn PostScript basics. Eventually, particularly for newer features that have 
been incorporated into the PostScript language, one has to consult the <i>
<a target="_blank" href="http://www.adobe.com/products/postscript/pdfs/PLRM.pdf">
PostScript Language Reference</a></i>. Happily, it should not be necessary to 
read all of this 900+ page book.</p>
<p style="text-align: left">PostScript is written in ordinary, printable 
characters, so programs can be composed with an ordinary text editor, such as 
Microsoft Notepad. (This discussion assumes the use of a Windows platform, but 
the procedures I describe can be carried out in an analogous way on other 
platforms.) Do not use a word processor, such as Microsoft Word, which saves 
documents in a special format.</p>
<p style="text-align: left">Being able to write a PostScript program is of 
limited usefulness if you cannot display whatever it is the program is intended 
to draw. A PostScript printer comes in handy here, although you can waste a lot 
of paper while learning language basics. It is therefore helpful to have a viewer for 
PostScript files, and, fortunately, there is a free multi-platform viewer 
available. It is called GSView, and it provides a user-friendly interface to 
another piece of software called Ghostscript, which does much of the real work 
of translating PostScript into an image. These programs are easily 
installed and can be downloaded from
<a target="_blank" href="http://pages.cs.wisc.edu/~ghost/">here</a>. Using 
GSView, you can view your PostScript or Encapsulated PostScript files. You can 
also view PDF files or create PDF files from PostScript ones. (Adobe has a 
helpful essay on the relationship between PostScript and Portable Document 
Format, PDF,
<a target="_blank" href="http://www.adobe.com/print/features/psvspdf/">here</a>. 
It isn’t essential to understand this relationship, but it does prevent 
misconceptions.)</p>
<p style="text-align: left">Curve-stitch designs can be distributed as PDF 
files, but this is not necessarily the best format to use in certain contexts. 
The curve-stitch designs on my Web site are GIF, JPEG, or PNG files. Because I have
<a target="_blank" href="http://www.adobe.com/products/acrobat/">Adobe Acrobat</a> 
on my computer, I use it to save page images in graphic formats, such as JPG or 
TIF. GSView cannot do this, and neither does the free
<a target="_blank" href="http://www.adobe.com/products/reader/">Adobe Reader</a>. 
In a pinch, one can take a screen shot of a design, displayed in GSView or Adobe 
Reader, say, and paste it into Microsoft Paint or some other graphics program. 
(The currently active window can be copied to the clipboard using Alt+Print 
Screen. The Print Screen key alone copies the entire screen to the clipboard.) 
In the graphics editor, the screen image can be cropped to show only the desired 
design, and the result can be saved in any of several graphic formats.</p>
<p style="text-align: left">I recently discovered another program that is quite 
helpful. That program is <a target="_blank" href="http://www.inkscape.org/">
Inkscape</a>, a free program that generates SVG (Scalable Vector Graphics) 
files. Its normal output is similar in function to that of PostScript; it can be 
rendered as high-quality images with sharp lines. (Some modern browsers, Firefox 
for example, can display SVG files. Try out your browser on this
<a target="_blank" href="http://info.deimel.org/images/cube.svg">file</a>, and 
be sure to zoom in and out to see how the image is rendered.)</p>
<p style="text-align: left">One can actually produce designs directly with 
Inkscape, though this can be even more tedious than hand-coding PostScript. 
Inkscape, however, can generate SVG or PNG (Portable Network Graphics) files 
from a PDF file. If the PDF file has come from a hand-coded PostScript file, 
vector information is preserved, and the SVG file from Inkscape will be as good 
as one drawn in Inkscape directly. I have found that PNG files generated by 
Inkscape are very good.</p>
<p style="text-align: left"><b>An Example.</b> I was asked to provide an example 
curve-stitch design, along with the program that generates it. I chose a 
relatively simple design:</p>
<p style="text-align: center">
<img border="0" src="../images/web_example.jpg" width="580" height="580" align="center" alt="Example design"></p>
<p style="text-align: center">
&nbsp;</p>
<p style="text-align: left">The PostScript code to produce this design is the 
following:</p>
<div align="center">
	<table border="1" width="95%" id="table1" cellspacing="0" cellpadding="2">
		<tr>
			<td bgcolor="#F1F1F1"><pre>
%! Adobe-PostScript
			
%%Copyright 2007 by Lionel Deimel. All rights reserved.

% Procedure square2

% This procedure creates a square with generalized curve-stitch
% parabolas drawn inside. The following variables are used:
%
% sidelength: length of side of square (all measurements in points)
% segments: # of equal-length segments into which each side of square is
%           to be divided
% seglength: length of each segment
% offset: distance around perimeter of square in counterclockwise
%         direction (measured in # of segments) betweeen points to be
%         connected in design
% xcoord: array of x-coordinates of (4 x segments) points on square
%         perimeter
% ycoord: array of y-coordinates of (4 x segments) points on square
%         perimeter
% index: loop index representing current point on square perimeter
%        being processed
%
% This procedure expects the following arguments on the stack when
% invoked(the top of stack is at the right):
%
% segments sidelength offset
%
% The procedure draws the design and strokes it.
%
% NOTES: When segments is a even number and offset is segments / 2,
% this procedure draws a square with four standard-construction,
% non-overlapping curve-stitch parabolas inscribed in the corners of
% the square. Other designs result from manipulating the values of
% segments and offset. The value of segments should be positive, but it
% need not be even. The value of offset should be non-negative. Values
% greater than 2 x segments repeat designs achievable with smaller
% offsets.

/square2 {

	% Save entered and computed parameters in dictionary
	/offset exch def
	/sidelength exch def
	/segments exch def
	/points segments 4 mul def
	/xcoord points array def
	/ycoord points array def
	/seglength sidelength segments div def
	
	% Save coordinates of segment endpoints in arrays xcoord and
	% ycoord. The points are numbered, beginning with 0 at the
	% origin and moving counterclockwise around the square.
	0 1 segments 1 sub {
		dup
		/index exch def
		seglength mul /dist exch def
		xcoord index dist put
		xcoord index segments add sidelength put
		xcoord index segments 2 mul add sidelength dist sub put
		xcoord index segments 3 mul add 0 put
		ycoord index 0 put
		ycoord index segments add dist put 
		ycoord index segments 2 mul add sidelength put
		ycoord index segments 3 mul add sidelength dist sub put }
		for

	% Draw square
	0 0 moveto
	sidelength 0 lineto
	sidelength sidelength lineto
	0 sidelength lineto
	0 0 lineto
	closepath

	% Draw internal lines
	0 1 points 1 sub {
		/index exch def
		xcoord index get
		ycoord index get
		moveto
		xcoord index offset add points mod get
		ycoord index offset add points mod get
		lineto }
		for

	% Paint path
	stroke }
	def % square2


% Main program starts here

% Set color for background
0.2 0.4 .8 setrgbcolor
	
% Translate origin to allow for entire picture in upper right quadrant
1 1 translate

% Define dimensions of square and area around square.
% side: width of square
% matwidth: width of background around square
% picwidth: with of entire figure, ignoring framing border
/side 300 def
/matwidth 50 def
/picwidth side matwidth matwidth add add def

% Draw and fill square for curve-stitch design background
0 0 moveto
picwidth 0 lineto
picwidth picwidth lineto
0 picwidth lineto
0 0 lineto
closepath
fill

% Draw black border around just-completed square
0 0 0 setrgbcolor
2 setlinewidth
0 0 moveto
picwidth 0 lineto
picwidth picwidth lineto
0 picwidth lineto
0 0 lineto
closepath

% Paint path
stroke

% Set color and line width for design
1 1 0 setrgbcolor
0.75 setlinewidth

% Translate origin to lower left corner of design
matwidth matwidth translate

% Draw design
24 side 18 square2

% Display page
showpage

%%EOF</pre></td></tr></table><p align="left">I wrote the program in Notepad. I previewed it using GSView 4.8. I used Acrobat 8.1 Professional to convert the program into a 
	PDF. Before doing this, however, I added this line at the top of the file:</p><p><pre>&lt;&lt; /PageSize [402 402] &gt;&gt; setpagedevice</pre></div>Effectively, this made the page size the same size as the figure drawn by the 
program. Without this line, the figure would have appeared at the lower left of a letter-size page. 
From Acrobat, I saved the PDF as a JPG file, which, reduced in size, appears 
above. I could also have used GSView to generate a PDF. In this case, one has to 
define the page size under User Defined on the Media menu. (Click
<a target="_blank" href="web_example.pdf">here</a> to see the PDF file produced 
by GSView.) Alternative ways of producing a graphic file from the PostScript 
source are described above. Also, cropping the image can be done later in the 
production process, in Inkscape, for example.<p>
GSView can also generate an encapsulated PostScript file, which is a PostScript 
file intended for incorporation into other documents. At least one graphics 
editor on my computer, Microsoft’s PhotoDraw 2000, version 2, can import an EPS 
file directly and generate a JPG or GIF file. (Readers may have this or another 
graphics editor having this capability.) Acrobat can also output an EPS 
file. Whereas GSView simply adds a few lines to the original PostScript file, 
however, the output from Acrobat is a large file best described as 
inscrutable. The EPS file generated by GSView, with a little editing, is the 
following:</p><div align="center">
	<table border="1" width="95%" id="table2" cellspacing="0" cellpadding="2">
		<tr>
			<td bgcolor="#F1F1F1"><pre>%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 402 402
%%Title: Curve-stitch design example for Lionel Deimel's Farrago
%%Creator: GSview from file web_example.ps
%%CreationDate: Thu Nov 08 13:30:09 2007
%%Copyright 2007 by Lionel Deimel. All rights reserved.
%%Pages: 1
%%EndComments
%%Page: 1 1
%%BeginDocument: Curve-stitch design example for Lionel Deimel's Farrago

% Procedure square2

% This procedure creates a square with generalized curve-stitch
% parabolas drawn inside. The following variables are used:
%
% sidelength: length of side of square (all measurements in points)
% segments: # of equal-length segments into which each side of square is
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; to be divided
% seglength: length of each segment
% offset: distance around perimeter of square in counterclockwise
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; direction (measured in # of segments) betweeen points to be
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; connected in design
% xcoord: array of x-coordinates of (4 x segments) points on square
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perimeter
% ycoord: array of y-coordinates of (4 x segments) points on square
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perimeter
% index: loop index representing current point on square perimeter
%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; being processed
%
% This procedure expects the following arguments on the stack when
% invoked(the top of stack is at the right):
%
% segments sidelength offset
%
% The procedure draws the design and strokes it.
%
% NOTES: When segments is a even number and offset is segments / 2,
% this procedure draws a square with four standard-construction,
% non-overlapping curve-stitch parabolas inscribed in the corners of
% the square. Other designs result from manipulating the values of
% segments and offset. The value of segments should be positive, but it
% need not be even. The value of offset should be non-negative. Values
% greater than 2 x segments repeat designs achievable with smaller
% offsets.

/square2 {

	% Save entered and computed parameters in dictionary
	/offset exch def
	/sidelength exch def
	/segments exch def
	/points segments 4 mul def
	/xcoord points array def
	/ycoord points array def
	/seglength sidelength segments div def
	
	% Save coordinates of segment endpoints in arrays xcoord and
	% ycoord. The points are numbered, beginning with 0 at the
	% origin and moving counterclockwise around the square.
	0 1 segments 1 sub {
		dup
		/index exch def
		seglength mul /dist exch def
		xcoord index dist put
		xcoord index segments add sidelength put
		xcoord index segments 2 mul add sidelength dist sub put
		xcoord index segments 3 mul add 0 put
		ycoord index 0 put
		ycoord index segments add dist put
		ycoord index segments 2 mul add sidelength put
		ycoord index segments 3 mul add sidelength dist sub put }
		for

	% Draw square
	0 0 moveto
	sidelength 0 lineto
	sidelength sidelength lineto
	0 sidelength lineto
	0 0 lineto
	closepath

	% Draw internal lines
	0 1 points 1 sub {
		/index exch def
		xcoord index get
		ycoord index get
		moveto
		xcoord index offset add points mod get
		ycoord index offset add points mod get
		lineto }
		for

	% Paint path
	stroke }
	def % square2


% Main program starts here

% Set color for background
0.2 0.4 .8 setrgbcolor
	
% Translate origin to allow for entire picture in upper right quadrant
1 1 translate

% Define dimensions of square and area around square.
% side: width of square
% matwidth: width of background around square
% picwidth: with of entire figure, ignoring framing border
/side 300 def
/matwidth 50 def
/picwidth side matwidth matwidth add add def

% Draw and fill square for curve-stitch design background
0 0 moveto
picwidth 0 lineto
picwidth picwidth lineto
0 picwidth lineto
0 0 lineto
closepath
fill

% Draw black border around just-completed square
0 0 0 setrgbcolor
2 setlinewidth
0 0 moveto
picwidth 0 lineto
picwidth picwidth lineto
0 picwidth lineto
0 0 lineto
closepath

% Paint path
stroke

% Set color and line width for design
1 1 0 setrgbcolor
0.75 setlinewidth

% Translate origin to lower left corner of design
matwidth matwidth translate

% Draw design
24 side 18 square2

% Display page
showpage

%%EOF

%%EndDocument
%%Trailer</pre></td></tr></table><p align="left">I hope that this discussion will discourage the fainthearted 
	and encourage the bold. I have no intention of established a Famous 
	PostScript Programmers’ School, but I will try to help any serious student 
	get unstuck if he or she tries to use PostScript and runs into the 
	proverbial brick wall. My e-mail address is below.</p><p align="left">Happy coding!</p><p align="right">— LED, 11/8/2007, 
	rev. 3/19/2009</div></td></tr></table></div><p align="center">
<!--webbot bot="Navigation" S-Type="arrows"
S-Orientation="horizontal" S-Rendering="graphics" B-Include-Home="TRUE"
B-Include-Up="TRUE" startspan --><a href="general_14.htm"><img src="../_derived/back_cmp_farrago100_back.gif" width="100" height="20" border="0" alt="Previous" align="middle"></a> <a href="../"><img src="../_derived/home_cmp_farrago100_home.gif" width="100" height="20" border="0" alt="Home" align="middle"></a> <a href="curve_stitch.htm"><img src="../_derived/up_cmp_farrago100_up.gif" width="100" height="20" border="0" alt="Up" align="middle"></a><!--webbot bot="Navigation" i-checksum="55240" endspan -->
</p>

<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p>
<script language="javascript" type="text/javascript">

<!--
// JavaScript code for info.deimel.org

// Create global variable for new window
var popWindow;

// Open popup window named of size w x h that displays the page whose name is pgname.
// If such a window is already open, it is first closed to assure a window of the proper size is created.

function popup(pgname,w,h) {

	// Close existing window. This may not work if such a window exists that was not opened from the current window.
	// Actually, this line is useful only for very old browsers because of the lines that follow. (See below.)
	if (typeof(popWindow) != "undefined" && !popWindow.closed){popWindow.close()};

	// Create new window. If the window is not new, its size and position may not be set by this statement,
	// depending upon the browser.
	popWindow = window.open(pgname,"popWin", "resizable=yes,toolbar=0,location=0,directories=0,status=0,menubar=0,scrollbars=no,top=40,left=40,copyhistory=0,width="+w+",height="+h);

	// Assure proper size, position, and visibility. The top two statements may not work for very old browsers.
	popWindow.resizeTo(w,h);
	popWindow.moveTo(40,40);
	popWindow.focus();

	}

-->
</script>
</p>
<div align="center">
	<center>
	<table border="0" width="610" height="79">
		<tr>
			<td>
			<h5><font size="1">&nbsp;<br>
			</font>Send mail to
			<a href="javascript:popup(&quot;http://mailhide.recaptcha.net/d?k=01yj_wgTRcw5hM1Mc9UQmmxQ==&c=uu9v5PhbkBTJdSWeBZV0wKs2YduhHtufBTLm2jkNeuQ=&quot;,550,450)">
			Lionel Deimel</a> with questions or comments about<b> Lionel 
			Deimel’s Farrago</b>.<br>
			Copyright © 2000-2019 by Lionel Deimel. All rights reserved.</h5>
			</td>
		</tr>
	</table>
	</center></div>
<p>
<!-- Google Analytics Code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-8212543-1");
pageTracker._trackPageview();
} catch(err) {}</script>
</p>
</td></tr><!--msnavigation--></table></body>

</html>
