#!/usr/bin/python
# -*- coding: utf-8 -*-

import numpy as np

from numpy import cos, sin, pi, arctan2, sqrt,\
                  square, int, linspace, arange,sum,\
                  array, zeros, mean, diff, column_stack,\
                  unique, dot, logical_not, ones, concatenate
from numpy.random import normal, randint, random, shuffle

from scipy.spatial import cKDTree

import cairo, Image
from collections import defaultdict
from itertools import count

#import matplotlib.pyplot as plt


FILENAME = './img/density_b'
DRAW_ITT = 1000

BACK = [1.]*3
FRONTA = [0,0,0,9]
FRONTB = [0,0,0,0.05]
CONTRASTA = [0.84,0.37,0]
CONTRASTB = [0.53,0.53,1]
CONTRASTC = [0.84,1,0]

PI = pi
TWOPI = 2.*pi

NMAX = 2*1e8
SIZE = 2000
ONE = 1./SIZE

#STP = 1.e-5

STP = ONE
FARL  = 20*ONE # ignore nodes beyond this distance
NEARL = 3*ONE # do not attempt to approach neighbours close than this 

MID = 0.5
INIT_R = 0.0005
INIT_N = 10


class Render(object):

  def __init__(self,n):

    sur = cairo.ImageSurface(cairo.FORMAT_ARGB32,n,n)
    ctx = cairo.Context(sur)
    ctx.scale(n,n)

    self.n = n
    self.sur = sur
    self.ctx = ctx

    self.clear_canvas()

  def clear_canvas(self):

    self.ctx.set_source_rgb(*BACK)
    self.ctx.rectangle(0,0,1,1)
    self.ctx.fill()

  def line(self,x1,y1,x2,y2):

    self.ctx.move_to(x1,y1)
    self.ctx.line_to(x2,y2)
    self.ctx.stroke()

  def line_fill(self,xx,yy):

    self.ctx.move_to(xx[0],yy[0])

    for i in xrange(1,len(xx)):
      self.ctx.line_to(xx[i],yy[i])

    self.ctx.close_path()
    self.ctx.fill()

  def circle(self,x,y,r):

    self.ctx.arc(x,y,r,0,TWOPI)
    self.ctx.stroke()

  def circles(self,xx,yy,rr):

    for x,y,r in zip(xx,yy,rr):
      self.ctx.arc(x,y,r,0,TWOPI)
      self.ctx.stroke()

  def circle_fill(self,x,y,r):

    self.ctx.arc(x,y,r,0,TWOPI)
    self.ctx.fill()

class Line(object):

  def __init__(self):

    self.X = zeros(NMAX,'float')
    self.Y = zeros(NMAX,'float')
    self.SV = {}
    self.SS = {}

    self.vnum = 0
    self.snum = 0
    self.sind = 0

  def _add_vertex(self,x,y):

    vnum = self.vnum
    self.X[vnum] = x
    self.Y[vnum] = y

    self.vnum += 1
    return self.vnum-1

  def update_tree(self):

    vnum = self.vnum

    xy = column_stack([self.X[:vnum],self.Y[:vnum]])
    self.tree = cKDTree(xy)

    #self.tree_distance = self.tree.sparse_distance_matrix(self.tree,FARL)
    #print self.tree_distance

    #R = zeros((vnum,vnum),'float')
    #A = zeros((vnum,vnum),'float')
    
    #for i in xrange(vnum):
      #dx = self.X[i] - self.X[:vnum]
      #dy = self.Y[i] - self.Y[:vnum]
      #R[i,:] = square(dx)+square(dy)
      #A[i,:] = arctan2(dy,dx)

    #sqrt(R,R)
    #self.R = R
    #self.A = A

  def get_all_near_vertices(self,r):

    xy = column_stack([self.X[:self.vnum],self.Y[:self.vnum]])
    near_inds = self.tree.query_ball_point(xy,r)

    return near_inds

  def _add_segment(self,a,b,connected_to=[]):

    for seg in connected_to:

      if self.SS.has_key(seg):
        self.SS[seg].append(self.sind)
      else:
        self.SS[seg] = [self.sind]

      if self.SS.has_key(self.sind):
        self.SS[self.sind].append(seg)
      else:
        self.SS[self.sind] = [seg]

    self.SV[self.sind] = [a,b]
    self.sind += 1
    self.snum += 1
    return self.sind-1

  def _delete_segment(self,a):

    vv = self.SV[a]
    del(self.SV[a])
    self.snum -= 1

    connected_to = self.SS[a]
    for seg in connected_to:
      self.SS[seg] = [h for h in self.SS[seg] if not h==a]

    del(self.SS[a])

    return vv

  def split_segment(self,a):

    vv = self.SV[a]
    midx = (self.X[vv[1]] + self.X[vv[0]])*0.5
    midy = (self.Y[vv[1]] + self.Y[vv[0]])*0.5

    newv = self._add_vertex(midx,midy)

    connected_to_a = self.SS[a]
    connected_to_b = []
    connected_to_c = []

    for seg in connected_to_a:

      if vv[0] in self.SV[seg]:
        connected_to_b.append(seg)
      if vv[1] in self.SV[seg]:
        connected_to_c.append(seg)

    b = self._add_segment(vv[0],newv,connected_to=connected_to_b)
    connected_to_c.append(b)
    c = self._add_segment(vv[1],newv,connected_to=connected_to_c)

    self._delete_segment(a)

    return newv, [b,c]

  def get_tangent(self,a):
   
    try:

      vv = self.SV[a]
      sx = self.X[vv[1]] - self.X[vv[0]]
      sy = self.Y[vv[1]] - self.Y[vv[0]]
      dd = 1./sqrt(sx*sx+sy*sy)

    except IndexError:
      return 0,0

    return sx*dd,sy*dd


def init_circle(l,ix,iy,r,n):

  th = arange(n).astype('float')/float(n)*TWOPI
  xx = ix + cos(th)*r
  yy = iy + sin(th)*r

  vv = []
  for x,y in zip(xx,yy):
    vv.append(l._add_vertex(x,y))

  connected_to = []
  
  for i in xrange(len(vv)-1):
    
    seg = l._add_segment(vv[i],vv[i+1], connected_to=connected_to)
    if i == 0:
      first = seg

    connected_to = [seg]
  
  connected_to.append(first)
  l._add_segment(vv[0],vv[-1],connected_to=connected_to)

def split_long_segments(l,length_limit):

  split = []
  for s,vv in l.SV.iteritems():
    sx = l.X[vv[1]] - l.X[vv[0]]
    sy = l.Y[vv[1]] - l.Y[vv[0]]
    dd = sqrt(sx*sx+sy*sy)
    if dd>length_limit:
      split.append(s)

  for s in split:
    l.split_segment(s)

  if split:
    print 'long splits: ', len(split)

def growth(l):

  grow = []
  count = 0

  near2 = l.get_all_near_vertices(FARL*2.)

  for s in l.SV.keys():

    ss = l.SS[s]
    
    try:
      t0x,t0y = l.get_tangent(ss[0])
      t1x,t1y = l.get_tangent(ss[1])

      dot = t0x*t1x+t0y*t1y
      dd = 1.-np.abs(dot)
    except IndexError:
      dot = 0.
      dd = 0.
    
    #if random()<1./len(near2[l.SV[s][0]]):
    if random()<dd:
      grow.append(s)
      count += 1

  print 'growth:',count

  new_vertices = []
  for g in grow:
    newv,_ = l.split_segment(g)
    new_vertices.append(newv)

  return new_vertices

def continous_growth(l):

  grow = []
  count = 0

  for s in l.SV.keys():

    ss = l.SS[s]
    
    try:
      t0x,t0y = l.get_tangent(ss[0])
      t1x,t1y = l.get_tangent(ss[1])

      dot = t0x*t1x+t0y*t1y
      kappa = 1.-np.abs(dot)
      vv = l.SV[s]
      dd = sqrt(square(l.Y[vv[0]]-l.Y[vv[1]])+square(l.Y[vv[0]]-l.Y[vv[1]]))
    except IndexError:
      kappa = 0.
      dd = 0.

    #print dd/NEARL
    if random()<square(kappa) and dd>NEARL*1.1:
      grow.append(s)
      count += 1

  #print 'growth:',count

  new_vertices = []
  for g in grow:
    newv,_ = l.split_segment(g)
    new_vertices.append(newv)

  return new_vertices

def segment_attract(l,sx,sy):

  for s,vv in l.SV.iteritems():

    dx = l.X[vv[1]] - l.X[vv[0]]
    dy = l.Y[vv[1]] - l.Y[vv[0]]
    dd = sqrt(dx*dx+dy*dy)
    a = arctan2(dy,dx)

    if dd>NEARL:
      sx[vv[0]] += cos(a)
      sy[vv[0]] += sin(a)
      sy[vv[1]] -= sin(a)
      sx[vv[1]] -= cos(a)

def collision_reject(l,sx,sy):

  X = l.X
  Y = l.Y
  near = l.get_all_near_vertices(FARL)

  for k,(x,y,ii) in enumerate(zip(X,Y,near)):

    iii = set(ii)
    try:
      iii.remove(k)
    except KeyError:
      pass
    inds = list(iii)

    dx = x - X[inds]
    dy = y - Y[inds]
    dd = sqrt(square(dx)+square(dy))

    force = FARL-dd
    a = arctan2(dy,dx)

    #dd = l.R[k,ii]
    #a = l.A[k,ii]
    #force = FARL-dd

    sx[k] += sum(cos(a)*force)
    sy[k] += sum(sin(a)*force)

def plot_connections(l):
  """
  not in use.
  """

  plt.clf()

  #plt.plot(l.X[:l.vnum],l.Y[:l.vnum],'or')
  for s,vv in l.SV.iteritems():
    plt.plot([l.X[vv[0]],l.X[vv[1]]],
             [l.Y[vv[0]],l.Y[vv[1]]],'k-')

  plt.xlim([0,1])
  plt.ylim([0,1])
  plt.tight_layout()
  plt.draw()

def show_with_circles(render,l,itt,new_vertices):

  render.clear_canvas()

  render.ctx.set_source_rgba(*FRONTA)
  for s,vv in l.SV.iteritems():
    render.line(l.X[vv[0]],l.Y[vv[0]],
                l.X[vv[1]],l.Y[vv[1]])

  render.ctx.set_source_rgba(*CONTRASTA)
  render.circles(l.X[new_vertices],l.Y[new_vertices],
                 ones(len(new_vertices),'float')*ONE*2)

def show(render,l,itt):

  render.clear_canvas()
  render.ctx.set_source_rgba(*FRONTA)
  for s,vv in l.SV.iteritems():
    render.line(l.X[vv[0]],l.Y[vv[0]],
                l.X[vv[1]],l.Y[vv[1]])

def order_outline(l):

  traversed_segments = set()
  ordered_segments = []

  s,ss = l.SS.iteritems().next()

  curr = s

  ordered_segments.append(curr)
  traversed_segments.add(curr)

  while True:

    if l.SS[curr][0] not in traversed_segments:

      curr = l.SS[curr][0]
      ordered_segments.append(curr)
      traversed_segments.add(curr)

    elif l.SS[curr][1] not in traversed_segments:

      curr = l.SS[curr][1]
      ordered_segments.append(curr)
      traversed_segments.add(curr)

    else:

      break

  ordered_vertices = []

  vva = l.SV[ordered_segments[0]]
  vvb = l.SV[ordered_segments[1]]
  if vva[0] in vvb:
    curr = vva[0]
  else:
    curr = vva[1]

  ordered_vertices.append(curr)
  
  for s in ordered_segments[1:]:

    vv = l.SV[s]
    if curr == vv[0]:

      ordered_vertices.append(vv[1])
      curr = vv[1]

    elif curr == vv[1]:

      ordered_vertices.append(vv[0])
      curr = vv[0]

    else:

      break

  return ordered_vertices

def save_image(render,itt,info=""):

  fn = '{:s}{:s}_{:08d}.png'.format(FILENAME,info,itt)
  render.sur.write_to_png(fn)
  print 'wrote: ', fn

def print_info(l):

  print
  print 'V:', l.vnum, 'S:', l.sind
  print 


def main():

  SX = zeros(NMAX,'float')
  SY = zeros(NMAX,'float')
  A = ones(NMAX,'bool')
  
  render = Render(SIZE)
  render.ctx.set_line_width(ONE*2)
  render.ctx.set_source_rgba(*FRONTA)

  L = Line()

  init_circle(L,MID,MID,INIT_R,INIT_N)

  print L.vnum
  
  L.update_tree()

  try:
  
    for itt in count():


      if itt%DRAW_ITT==0 and not itt==0:

        ordered_vertices = order_outline(L)
        render.clear_canvas()
        render.ctx.set_source_rgba(*FRONTA)
        render.line_fill(L.X[ordered_vertices],L.Y[ordered_vertices])
        print_info(L)
        save_image(render, itt)

      #if random()<0.01:

      new_vertices = continous_growth(L)
      

        #if new_vertices:
          #show_with_circles(render,L,itt, new_vertices)
          #save_image(render, itt, info='_spawn')

      L.update_tree()

      SX[:L.vnum] = 0.
      SY[:L.vnum] = 0.

      segment_attract(L,SX[:L.vnum],SY[:L.vnum])
      collision_reject(L,SX[:L.vnum],SY[:L.vnum])

      SX[:L.vnum] *= STP
      SY[:L.vnum] *= STP

      L.X[:L.vnum] += SX[:L.vnum]
      L.Y[:L.vnum] += SY[:L.vnum]


  except KeyboardInterrupt:
    pass

  finally:
    pass

    #fn = '{:s}_final.png'.format(FILENAME)
    #render.sur.write_to_png(fn)
    #print
    #print 'V:', L.vnum, 'S:', L.sind
    #print fn

if __name__ == '__main__':

  if True:

    import pstats, cProfile
    PFILENAME = 'profile.profile'
    cProfile.run('main()',PFILENAME)
    p = pstats.Stats(PFILENAME)
    p.strip_dirs().sort_stats('cumulative').print_stats()

  else:

    main()

